
{
  "swagger" : "2.0",
  "info" : {
    "description" : "REST API to manage Reepay resources",
    "version" : "1",
    "title" : "API",
    "contact" : {
      "name" : "support@reepay.com"
    }
  },
  "host" : "api.reepay.com",
  "basePath" : "/",
  "tags" : [ {
    "name" : "account"
  }, {
    "name" : "add_on"
  }, {
    "name" : "additional cost"
  }, {
    "name" : "agreement"
  }, {
    "name" : "authenticate"
  }, {
    "name" : "charge"
  }, {
    "name" : "coupon"
  }, {
    "name" : "credit"
  }, {
    "name" : "customer"
  }, {
    "name" : "discount"
  }, {
    "name" : "dunning plan"
  }, {
    "name" : "event"
  }, {
    "name" : "invoice"
  }, {
    "name" : "mail template"
  }, {
    "name" : "organisation"
  }, {
    "name" : "refund"
  }, {
    "name" : "plan"
  }, {
    "name" : "subscription"
  }, {
    "name" : "user"
  }, {
    "name" : "webhook"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/v1/account/pubkey" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Get list of public keys",
        "description" : "",
        "operationId" : "getPublicKeys",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Key"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "account" ],
        "summary" : "Create public key",
        "description" : "",
        "operationId" : "createPublicKey",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Key"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/account/pubkey/{key}/expire" : {
      "post" : {
        "tags" : [ "account" ],
        "summary" : "Expire public key",
        "description" : "",
        "operationId" : "expirePublicKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Public key",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/account/webhook_settings" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Get webhook settings",
        "description" : "",
        "operationId" : "getWebhookSettings",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WebhookSettings"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "account" ],
        "summary" : "Update webhook settings",
        "description" : "",
        "operationId" : "updateWebhookSettingsJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateWebhookSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WebhookSettings"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/account/webhook_settings/secret" : {
      "post" : {
        "tags" : [ "account" ],
        "summary" : "Generate new webhook secret",
        "description" : "",
        "operationId" : "generateWebhookSecret",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WebhookSettings"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/account/mail_settings" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Get mail settings",
        "description" : "",
        "operationId" : "getMailSettings",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MailSettings"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "account" ],
        "summary" : "Update mail settings",
        "description" : "",
        "operationId" : "updateMailSettingsJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MailSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MailSettings"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/account/discount_settings" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Get discount settings",
        "description" : "",
        "operationId" : "getDiscountSettings",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DiscountSettings"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "account" ],
        "summary" : "Update discount settings",
        "description" : "",
        "operationId" : "updateDiscountSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DiscountSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DiscountSettings"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/account" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Get account",
        "description" : "",
        "operationId" : "getCurrentAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Account"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "account" ],
        "summary" : "Update account",
        "description" : "",
        "operationId" : "updateAccountJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateAccount"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Account"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/account/privkey" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Get list of private keys",
        "description" : "",
        "operationId" : "getPrivateKeys",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Key"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "account" ],
        "summary" : "Create private key",
        "description" : "",
        "operationId" : "createPrivateKey",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Key"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/account/privkey/{key}/expire" : {
      "post" : {
        "tags" : [ "account" ],
        "summary" : "Expire private key",
        "description" : "",
        "operationId" : "expirePrivateKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Private key",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/add_on" : {
      "get" : {
        "tags" : [ "add_on" ],
        "summary" : "Get list of add-ons",
        "description" : "",
        "operationId" : "getAddOns",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to get",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "maximum" : 10000000,
          "minimum" : 1,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size to use",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Optional search expression",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Optional sorting expression",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AddOnSearch"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "add_on" ],
        "summary" : "Create add-on",
        "description" : "",
        "operationId" : "createAddOn",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateAddOn"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AddOn"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/add_on/{handle}" : {
      "get" : {
        "tags" : [ "add_on" ],
        "summary" : "Get add-on",
        "description" : "",
        "operationId" : "getAddOn",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Add-on handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AddOn"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "add_on" ],
        "summary" : "Update add-on",
        "description" : "",
        "operationId" : "updateAddOn",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Add-on handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateAddOn"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AddOn"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "add_on" ],
        "summary" : "Delete add-on",
        "description" : "",
        "operationId" : "deleteAddOn",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Add-on handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AddOn"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/add_on/{handle}/undelete" : {
      "post" : {
        "tags" : [ "add_on" ],
        "summary" : "Un-delete add-on",
        "description" : "",
        "operationId" : "undeleteAddOn",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Add-on handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AddOn"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/additional_cost/{handle}" : {
      "get" : {
        "tags" : [ "additional cost" ],
        "summary" : "Get additional cost",
        "description" : "",
        "operationId" : "getAdditionalCost",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Additonal cost handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AdditionalCost"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/additional_cost/subscription/{handle}" : {
      "get" : {
        "tags" : [ "additional cost" ],
        "summary" : "Get additional costs for subscription",
        "description" : "",
        "operationId" : "getAdditionalCosts",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdditionalCost"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/additional_cost" : {
      "post" : {
        "tags" : [ "additional cost" ],
        "summary" : "Create additional cost",
        "description" : "",
        "operationId" : "createAdditionalCostJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateAdditionalCost"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AdditionalCost"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/additional_cost/{handle}/cancel" : {
      "post" : {
        "tags" : [ "additional cost" ],
        "summary" : "Cancel pending additional cost",
        "description" : "",
        "operationId" : "cancelAdditionalCost",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Additonal cost handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AdditionalCost"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/agreement/card_gateway" : {
      "get" : {
        "tags" : [ "agreement" ],
        "summary" : "Get all card gateway agreements",
        "description" : "",
        "operationId" : "getCardGatewayAgreements",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "only_active",
          "in" : "query",
          "description" : "Get only active",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "non_deleted",
          "in" : "query",
          "description" : "Get only non-deleted",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GatewayAgreement"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "agreement" ],
        "summary" : "Create card gateway agreement",
        "description" : "",
        "operationId" : "createCardGatewayAgreement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCardGatewayAgreement"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GatewayAgreement"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/agreement/card_gateway/{id}" : {
      "put" : {
        "tags" : [ "agreement" ],
        "summary" : "Update card gateway agreement",
        "description" : "",
        "operationId" : "updateCardGatewayAgreement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Agreement id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateCardGatewayAgreement"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GatewayAgreement"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/agreement/pgw" : {
      "post" : {
        "tags" : [ "agreement" ],
        "summary" : "Create payment gateway agreement",
        "description" : "",
        "operationId" : "createPgwAgreement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PgwAgreement"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GatewayAgreement"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/agreement/pgw/{id}" : {
      "put" : {
        "tags" : [ "agreement" ],
        "summary" : "Update pgw agreement",
        "description" : "",
        "operationId" : "updatePgwAgreement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Agreement id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdatePgwAgreement"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GatewayAgreement"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/agreement/mobile_pay_subscription" : {
      "get" : {
        "tags" : [ "agreement" ],
        "summary" : "Get all mobilepay gateway agreements",
        "description" : "",
        "operationId" : "getMobilePayAgreements",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "non_deleted",
          "in" : "query",
          "description" : "Get only non-deleted",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GatewayAgreement"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "agreement" ],
        "summary" : "Prepare MobilePay subscription agreement",
        "description" : "",
        "operationId" : "prepareMobilePaySubscriptionAgreement",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MobilePaySubscriptionAgreementPrepareResponse"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/agreement/mobile_pay_subscription/{ref}/activate" : {
      "post" : {
        "tags" : [ "agreement" ],
        "summary" : "Activate pending MobilePay subscription agreement by MobilePay agreement id",
        "description" : "",
        "operationId" : "activateMobilePaySubscriptionAgreement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ref",
          "in" : "path",
          "description" : "MobilePay agreement id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GatewayAgreement"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/agreement" : {
      "get" : {
        "tags" : [ "agreement" ],
        "summary" : "Get all agreements",
        "description" : "",
        "operationId" : "getGatewayAgreements",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "only_active",
          "in" : "query",
          "description" : "Get only active",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "non_deleted",
          "in" : "query",
          "description" : "Get only non-deleted",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GatewayAgreement"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/agreement/{id}" : {
      "get" : {
        "tags" : [ "agreement" ],
        "summary" : "Get gateway agreement",
        "description" : "",
        "operationId" : "getGatewayAgreement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Agreement id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GatewayAgreement"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "agreement" ],
        "summary" : "Delete gateway agreement",
        "description" : "",
        "operationId" : "deleteGatewayAgreement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Agreement id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GatewayAgreement"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/agreement/{id}/enable" : {
      "post" : {
        "tags" : [ "agreement" ],
        "summary" : "Enable gateway agreement",
        "description" : "",
        "operationId" : "enableGatewayAgreement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Agreement id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GatewayAgreement"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/agreement/{id}/disable" : {
      "post" : {
        "tags" : [ "agreement" ],
        "summary" : "Disable gateway agreement",
        "description" : "",
        "operationId" : "disableGatewayAgreement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Agreement id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GatewayAgreement"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/authenticate/login" : {
      "post" : {
        "tags" : [ "authenticate" ],
        "summary" : "User login",
        "description" : "",
        "operationId" : "login",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "formData",
          "description" : "User email",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "formData",
          "description" : "User password",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organisation",
          "in" : "formData",
          "description" : "Organisation subdomain to login to",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "account",
          "in" : "formData",
          "description" : "Account handle or id to login to",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserLogin"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/authenticate/renew" : {
      "post" : {
        "tags" : [ "authenticate" ],
        "summary" : "Renew user login",
        "description" : "",
        "operationId" : "renew",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserRenew"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/authenticate/verify" : {
      "get" : {
        "tags" : [ "authenticate" ],
        "summary" : "Verify authentication",
        "description" : "",
        "operationId" : "verifyAuthentication",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/charge" : {
      "get" : {
        "tags" : [ "charge" ],
        "summary" : "Get charges",
        "description" : "",
        "operationId" : "getCharges",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to get",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "maximum" : 10000000,
          "minimum" : 1,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size to use",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Optional search expression",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Optional sorting expression",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ChargeSearch"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "charge" ],
        "summary" : "Create charge",
        "description" : "",
        "operationId" : "createCharge",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCharge"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Charge"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/charge/{handle}" : {
      "get" : {
        "tags" : [ "charge" ],
        "summary" : "Get charge",
        "description" : "",
        "operationId" : "getCharge",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Charge handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Charge"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/charge/prepare" : {
      "post" : {
        "tags" : [ "charge" ],
        "summary" : "Prepare charge",
        "description" : "",
        "operationId" : "prepareCharge",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PrepareChargeDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Charge"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/charge/{handle}/settle" : {
      "post" : {
        "tags" : [ "charge" ],
        "summary" : "Settle charge",
        "description" : "",
        "operationId" : "settleCharge",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Charge handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SettleCharge"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Charge"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/charge/{handle}/cancel" : {
      "post" : {
        "tags" : [ "charge" ],
        "summary" : "Cancel charge",
        "description" : "",
        "operationId" : "cancelCharge",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Charge handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Charge"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/coupon/code/validate" : {
      "get" : {
        "tags" : [ "coupon" ],
        "summary" : "Validate coupon",
        "description" : "",
        "operationId" : "validateCode",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "query",
          "description" : "Coupon code",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "plan",
          "in" : "query",
          "description" : "Optional plan to validate against",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customer",
          "in" : "query",
          "description" : "Optional customer to validate against",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Coupon"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/coupon" : {
      "get" : {
        "tags" : [ "coupon" ],
        "summary" : "Get list of coupons",
        "description" : "",
        "operationId" : "getCoupons",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to get",
          "required" : true,
          "type" : "integer",
          "default" : 1,
          "maximum" : 10000000,
          "minimum" : 1,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size to use",
          "required" : true,
          "type" : "integer",
          "default" : 20,
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Optional search expression",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Optional sorting expression",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CouponSearch"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "coupon" ],
        "summary" : "Create coupon",
        "description" : "",
        "operationId" : "createCoupon",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCoupon"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Coupon"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/coupon/{handle}" : {
      "get" : {
        "tags" : [ "coupon" ],
        "summary" : "Get coupon",
        "description" : "",
        "operationId" : "getCoupon",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Coupon handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Coupon"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "coupon" ],
        "summary" : "Update coupon",
        "description" : "",
        "operationId" : "updateCoupon",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Coupon handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateCoupon"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Coupon"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "coupon" ],
        "summary" : "Delete coupon",
        "description" : "",
        "operationId" : "deleteCoupon",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Coupon handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Coupon"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/coupon/{handle}/expire" : {
      "post" : {
        "tags" : [ "coupon" ],
        "summary" : "Expire coupon",
        "description" : "",
        "operationId" : "expireCoupon",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Coupon handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Coupon"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/credit/{handle}" : {
      "get" : {
        "tags" : [ "credit" ],
        "summary" : "Get credit",
        "description" : "",
        "operationId" : "getCredit",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Credit handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Credit"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/credit/subscription/{handle}" : {
      "get" : {
        "tags" : [ "credit" ],
        "summary" : "Get credits for subscription",
        "description" : "",
        "operationId" : "getCredits",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Credit"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/credit" : {
      "post" : {
        "tags" : [ "credit" ],
        "summary" : "Create credit",
        "description" : "",
        "operationId" : "createCreditJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCredit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Credit"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/credit/{handle}/cancel" : {
      "post" : {
        "tags" : [ "credit" ],
        "summary" : "Cancel credit",
        "description" : "",
        "operationId" : "cancelCredit",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Credit handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Credit"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}/payment_method/card/{id}" : {
      "get" : {
        "tags" : [ "customer" ],
        "summary" : "Get card",
        "description" : "",
        "operationId" : "getCard",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Card id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Card"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer" : {
      "get" : {
        "tags" : [ "customer" ],
        "summary" : "Get list of customers",
        "description" : "",
        "operationId" : "getCustomers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to get",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "maximum" : 10000000,
          "minimum" : 1,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size to use",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Optional search expression",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Optional sorting expression",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomerSearch"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "customer" ],
        "summary" : "Create customer",
        "description" : "",
        "operationId" : "createCustomerJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCustomer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}" : {
      "get" : {
        "tags" : [ "customer" ],
        "summary" : "Get customer",
        "description" : "",
        "operationId" : "getCustomer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "customer" ],
        "summary" : "Update customer",
        "description" : "",
        "operationId" : "updateCustomerJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateCustomer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "customer" ],
        "summary" : "Delete customer",
        "description" : "",
        "operationId" : "deleteCustomer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}/note" : {
      "get" : {
        "tags" : [ "customer" ],
        "summary" : "Get customer notes",
        "description" : "",
        "operationId" : "getCustomerNotes",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CustomerNote"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "customer" ],
        "summary" : "Create customer note",
        "description" : "",
        "operationId" : "createCustomerNoteJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCustomerNote"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomerNote"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}/payment_method" : {
      "get" : {
        "tags" : [ "customer" ],
        "summary" : "Get payment methods",
        "description" : "",
        "operationId" : "getCustomerPaymentMethods",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "only_active",
          "in" : "query",
          "description" : "Get only active",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "x-example" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaymentMethods"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}/payment_method/card/{id}/details" : {
      "get" : {
        "tags" : [ "customer" ],
        "summary" : "Get gateway card details",
        "description" : "",
        "operationId" : "getCardDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Card id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}/payment_method/card" : {
      "post" : {
        "tags" : [ "customer" ],
        "summary" : "Add card payment method",
        "description" : "",
        "operationId" : "addCardJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CardToken"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Card"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}/payment_method/card_import" : {
      "post" : {
        "tags" : [ "customer" ],
        "summary" : "Import card payment method",
        "description" : "",
        "operationId" : "importCardJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CardImport"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Card"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}/payment_method/{method_id}/inactivate" : {
      "post" : {
        "tags" : [ "customer" ],
        "summary" : "Inactivate payment method",
        "description" : "",
        "operationId" : "inactivatePaymentMethod",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "method_id",
          "in" : "path",
          "description" : "Payment method id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaymentMethods"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}/payment_method/{method_id}/activate" : {
      "post" : {
        "tags" : [ "customer" ],
        "summary" : "Activate payment method",
        "description" : "",
        "operationId" : "activatePaymentMethod",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "method_id",
          "in" : "path",
          "description" : "Payment method id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaymentMethods"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}/payment_method/{card_id}/card_reactivate" : {
      "post" : {
        "tags" : [ "customer" ],
        "summary" : "Reactivate failed card",
        "description" : "",
        "operationId" : "reactivateCard",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "card_id",
          "in" : "path",
          "description" : "Card id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Card"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/customer/{handle}/invoice" : {
      "post" : {
        "tags" : [ "customer" ],
        "summary" : "Create invoice for customer",
        "description" : "",
        "operationId" : "createCustomerInvoice",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Customer handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCustomerInvoice"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/discount" : {
      "get" : {
        "tags" : [ "discount" ],
        "summary" : "Get list of discounts",
        "description" : "",
        "operationId" : "getDiscounts",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to get",
          "required" : true,
          "type" : "integer",
          "default" : 1,
          "maximum" : 10000000,
          "minimum" : 1,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size to use",
          "required" : true,
          "type" : "integer",
          "default" : 20,
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Optional search expression",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Optional sorting expression",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DiscountSearch"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "discount" ],
        "summary" : "Create discount",
        "description" : "",
        "operationId" : "createDiscount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateDiscount"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Discount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/discount/{handle}" : {
      "get" : {
        "tags" : [ "discount" ],
        "summary" : "Get discount",
        "description" : "",
        "operationId" : "getDiscount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Discount handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Discount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "discount" ],
        "summary" : "Delete discount",
        "description" : "",
        "operationId" : "deleteDiscount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Discount handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Discount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/discount/{handle}/undelete" : {
      "post" : {
        "tags" : [ "discount" ],
        "summary" : "Undelete discount",
        "description" : "",
        "operationId" : "undeleteDiscount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Discount handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Discount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/dunning_plan" : {
      "get" : {
        "tags" : [ "dunning plan" ],
        "summary" : "Get list of dunning plans",
        "description" : "",
        "operationId" : "getDunningPlans",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DunningPlan"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "dunning plan" ],
        "summary" : "Create dunning plan",
        "description" : "",
        "operationId" : "createDunningPlanJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateDunningPlan"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DunningPlan"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/dunning_plan/{handle}" : {
      "get" : {
        "tags" : [ "dunning plan" ],
        "summary" : "Get dunning plan",
        "description" : "",
        "operationId" : "getDunningPlan",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Dunning plan handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DunningPlan"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "dunning plan" ],
        "summary" : "Update dunning plan",
        "description" : "",
        "operationId" : "updateJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Dunning plan handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateDunningPlan"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DunningPlan"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "dunning plan" ],
        "summary" : "Delete dunning plan",
        "description" : "",
        "operationId" : "deleteDunningPlan",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Dunning plan handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DunningPlan"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/event/{id}" : {
      "get" : {
        "tags" : [ "event" ],
        "summary" : "Get event",
        "description" : "",
        "operationId" : "getEvent",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Event id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Event"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/event" : {
      "get" : {
        "tags" : [ "event" ],
        "summary" : "Get list of events",
        "description" : "",
        "operationId" : "getEvents",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to get",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "maximum" : 10000000,
          "minimum" : 1,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size to use",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "customer",
          "in" : "query",
          "description" : "Customer handle",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subscription",
          "in" : "query",
          "description" : "Subscription handle",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "invoice",
          "in" : "query",
          "description" : "Invoice id",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/EventList"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/transaction/{transaction}" : {
      "get" : {
        "tags" : [ "invoice" ],
        "summary" : "Get transaction",
        "description" : "",
        "operationId" : "transaction",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "transaction",
          "in" : "path",
          "description" : "Transaction id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Transaction"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice" : {
      "get" : {
        "tags" : [ "invoice" ],
        "summary" : "Get list of invoices",
        "description" : "",
        "operationId" : "getInvoices",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to get",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "maximum" : 10000000,
          "minimum" : 1,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size to use",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Optional search expression",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Optional sorting expression",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/InvoiceSearch"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}" : {
      "get" : {
        "tags" : [ "invoice" ],
        "summary" : "Get invoice",
        "description" : "",
        "operationId" : "getInvoice",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/cancel" : {
      "post" : {
        "tags" : [ "invoice" ],
        "summary" : "Cancel invoice",
        "description" : "",
        "operationId" : "cancelInvoice",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/manual_settle" : {
      "post" : {
        "tags" : [ "invoice" ],
        "summary" : "Manual settle",
        "description" : "",
        "operationId" : "manualSettle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ManualSettleTransfer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/settle" : {
      "post" : {
        "tags" : [ "invoice" ],
        "summary" : "Settle",
        "description" : "",
        "operationId" : "settle",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Settle"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/settle/cancel" : {
      "post" : {
        "tags" : [ "invoice" ],
        "summary" : "Cancel settle later",
        "description" : "",
        "operationId" : "cancelSettleLater",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/cancel_all_dunning_pending/subscription/{handle}" : {
      "post" : {
        "tags" : [ "invoice" ],
        "summary" : "Cancel all dunning and pending",
        "description" : "",
        "operationId" : "cancelAllDunningPending",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscriptiom handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Invoice"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/transaction/{transaction}/cancel" : {
      "post" : {
        "tags" : [ "invoice" ],
        "summary" : "Cancel transaction",
        "description" : "",
        "operationId" : "cancelTransaction",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "transaction",
          "in" : "path",
          "description" : "Transaction id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Transaction"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/transaction/{transaction}/details" : {
      "get" : {
        "tags" : [ "invoice" ],
        "summary" : "Get transaction details",
        "description" : "",
        "operationId" : "transactionDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "transaction",
          "in" : "path",
          "description" : "Transaction id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/transaction" : {
      "get" : {
        "tags" : [ "invoice" ],
        "summary" : "Get transaction list",
        "description" : "",
        "operationId" : "transactionList",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to get",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "maximum" : 10000000,
          "minimum" : 1,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size to use",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Optional search expression",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Optional sorting expression",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TransactionSearch"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/reactivate" : {
      "post" : {
        "tags" : [ "invoice" ],
        "summary" : "Reactivate invoice",
        "description" : "",
        "operationId" : "reactivateInvoice",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/detach" : {
      "post" : {
        "tags" : [ "invoice" ],
        "summary" : "Detach from subscription",
        "description" : "",
        "operationId" : "detachFromSubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/billing_address" : {
      "put" : {
        "tags" : [ "invoice" ],
        "summary" : "Create or update invoice billing address",
        "description" : "",
        "operationId" : "createOrUpdateBillingAddress",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InvoiceBillingAddress"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "invoice" ],
        "summary" : "Delete invoice billing address",
        "description" : "",
        "operationId" : "deleteBillingAddress",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/invoice/{id}/shipping_address" : {
      "put" : {
        "tags" : [ "invoice" ],
        "summary" : "Create or update invoice shipping address",
        "description" : "",
        "operationId" : "createOrUpdateShippingAddress",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InvoiceShippingAddress"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "invoice" ],
        "summary" : "Delete invoice shipping address",
        "description" : "",
        "operationId" : "deleteShippingAddress",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice id or handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/mail_template/sample" : {
      "get" : {
        "tags" : [ "mail template" ],
        "summary" : "Get sample data",
        "description" : "",
        "operationId" : "getSample",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/organisation" : {
      "get" : {
        "tags" : [ "organisation" ],
        "summary" : "Get organisation",
        "description" : "",
        "operationId" : "getOrganisation",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Organisation"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "organisation" ],
        "summary" : "Update organisation",
        "description" : "",
        "operationId" : "update",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateOrganisation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Organisation"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/refund/{id}" : {
      "get" : {
        "tags" : [ "refund" ],
        "summary" : "Get refund",
        "description" : "",
        "operationId" : "getRefund",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Refund id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Refund"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/refund" : {
      "post" : {
        "tags" : [ "refund" ],
        "summary" : "Create refund",
        "description" : "",
        "operationId" : "createRefund",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateRefund"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Refund"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/plan/{handle}" : {
      "get" : {
        "tags" : [ "plan" ],
        "summary" : "Get list of plan versions",
        "description" : "",
        "operationId" : "getPlans",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Plan handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Plan"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "plan" ],
        "summary" : "Supersede plan",
        "description" : "",
        "operationId" : "supersedePlanJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Plan handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SupersedeSubscriptionPlan"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Plan"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "plan" ],
        "summary" : "Update plan",
        "description" : "",
        "operationId" : "updatePlanJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateSubscriptionPlan"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Plan"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "plan" ],
        "summary" : "Delete plan",
        "description" : "",
        "operationId" : "deletePlan",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription plan handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Plan"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/plan" : {
      "get" : {
        "tags" : [ "plan" ],
        "summary" : "Get list of plans",
        "description" : "",
        "operationId" : "getPlansList",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "only_active",
          "in" : "query",
          "description" : "Get only active",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "x-example" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Plan"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "plan" ],
        "summary" : "Create plan",
        "description" : "",
        "operationId" : "createPlanJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateSubscriptionPlan"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Plan"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/plan/{handle}/current" : {
      "get" : {
        "tags" : [ "plan" ],
        "summary" : "Get plan",
        "description" : "",
        "operationId" : "getCurrentPlan",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Plan handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Plan"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/plan/{handle}/{version}" : {
      "get" : {
        "tags" : [ "plan" ],
        "summary" : "Get plan version",
        "description" : "",
        "operationId" : "getPlan",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Plan handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Plan version",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Plan"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/expire" : {
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Expire subscription",
        "description" : "",
        "operationId" : "expire",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ExpireSubscription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}" : {
      "get" : {
        "tags" : [ "subscription" ],
        "summary" : "Get subscription",
        "description" : "",
        "operationId" : "getSubscription",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "subscription" ],
        "summary" : "Change subscription",
        "description" : "",
        "operationId" : "changeSubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ChangeSubscription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/preview" : {
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Preview subscription",
        "description" : "",
        "operationId" : "previewSubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreatePreparedSubscription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PreparedSubscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/cancel" : {
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Cancel subscription",
        "description" : "",
        "operationId" : "cancelSubscription",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CancelSubscription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/uncancel" : {
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Uncancel subscription",
        "description" : "",
        "operationId" : "uncancel",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/on_hold" : {
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Subscription on hold",
        "description" : "",
        "operationId" : "onHold",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/OnHoldSubscription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/reactivate" : {
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Reactivate subscription on hold",
        "description" : "",
        "operationId" : "reactivateSubscription",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ReactivateSubscription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/preview" : {
      "put" : {
        "tags" : [ "subscription" ],
        "summary" : "Preview change subscription",
        "description" : "",
        "operationId" : "previewChangeSubscription",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ChangeSubscription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ChangedSubscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/change_next_period_start" : {
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Change next renewal date",
        "description" : "",
        "operationId" : "changeNextPeriodStartJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ChangeNextPeriodStart"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/interval_amount" : {
      "get" : {
        "tags" : [ "subscription" ],
        "summary" : "Calculate interval amount",
        "description" : "",
        "operationId" : "intervalAmount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "From date on the form yyyy-MM-dd",
          "required" : true,
          "type" : "string",
          "x-example" : "2015-05-30"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "To date on the form yyyy-MM-dd",
          "required" : true,
          "type" : "string",
          "x-example" : "2015-07-15"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IntervalAmount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/payment_method" : {
      "get" : {
        "tags" : [ "subscription" ],
        "summary" : "Get payment methods",
        "description" : "",
        "operationId" : "getSubscriptionPaymentMethods",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaymentMethods"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Set payment method",
        "description" : "",
        "operationId" : "setPaymentMethod",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SetPaymentMethod"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaymentMethods"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "subscription" ],
        "summary" : "Remove all payment methods",
        "description" : "",
        "operationId" : "removeAllPaymentMethods",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaymentMethods"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/payment_method/{method_id}" : {
      "delete" : {
        "tags" : [ "subscription" ],
        "summary" : "Remove payment method",
        "description" : "",
        "operationId" : "removePaymentMethod",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "method_id",
          "in" : "path",
          "description" : "Payment method id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaymentMethods"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/invoice" : {
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Create invoice ondemand for subscription",
        "description" : "",
        "operationId" : "createSubscriptionInvoice",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateSubscriptionInvoice"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/discount" : {
      "get" : {
        "tags" : [ "subscription" ],
        "summary" : "Get subscription discounts",
        "description" : "",
        "operationId" : "getSubscriptionDiscounts",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SubscriptionDiscount"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Add subscription discount",
        "description" : "",
        "operationId" : "createSubscriptionDiscount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateSubscriptionDiscount"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubscriptionDiscount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/discount/{sdHandle}" : {
      "get" : {
        "tags" : [ "subscription" ],
        "summary" : "Get subscription discount",
        "description" : "",
        "operationId" : "getSubscriptionDiscount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sdHandle",
          "in" : "path",
          "description" : "Subscription discount handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubscriptionDiscount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "subscription" ],
        "summary" : "Delete subscription discount",
        "description" : "",
        "operationId" : "deleteSubscriptionDiscount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sdHandle",
          "in" : "path",
          "description" : "Subscription discount handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubscriptionDiscount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/add_on" : {
      "get" : {
        "tags" : [ "subscription" ],
        "summary" : "Get subscription add-ons",
        "description" : "",
        "operationId" : "getSubscriptionAddOns",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SubscriptionAddOn"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/add_on/{saHandle}" : {
      "get" : {
        "tags" : [ "subscription" ],
        "summary" : "Get subscription add-on",
        "description" : "",
        "operationId" : "getSubscriptionAddOn",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "saHandle",
          "in" : "path",
          "description" : "Subscription add-on handle",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubscriptionAddOn"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/coupon" : {
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Redeem coupon code for subscription",
        "description" : "",
        "operationId" : "redeemCouponCode",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RedeemCouponCode"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CouponRedemption"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription/{handle}/period_balance" : {
      "get" : {
        "tags" : [ "subscription" ],
        "summary" : "Get the period balance for subscription",
        "description" : "",
        "operationId" : "getSubscriptionPeriodBalance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "handle",
          "in" : "path",
          "description" : "Subscription handle",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Optional period date (default now) on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubscriptionPeriodBalance"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/subscription" : {
      "get" : {
        "tags" : [ "subscription" ],
        "summary" : "Get list of subscriptions",
        "description" : "",
        "operationId" : "getSubscriptions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to get",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "maximum" : 10000000,
          "minimum" : 1,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size to use",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Optional search expression",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Optional sorting expression",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubscriptionSearch"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "subscription" ],
        "summary" : "Create subscription",
        "description" : "",
        "operationId" : "createSubscriptionJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateSubscription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/user" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get users",
        "description" : "",
        "operationId" : "getUsers",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UserAccount"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/user/{id}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user",
        "description" : "",
        "operationId" : "getUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserAccount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Update user",
        "description" : "",
        "operationId" : "updateUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateUser"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserAccount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "",
        "operationId" : "deleteUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/user/{id}/password" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Change password",
        "description" : "",
        "operationId" : "updatePassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateUserPassword"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserAccount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/user/{id}/groups" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Update user groups",
        "description" : "",
        "operationId" : "updateAuth",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateUserGroups"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserAccount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/user/invite" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Invite user",
        "description" : "",
        "operationId" : "inviteUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InviteUser"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserAccount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/user/invite/{token}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get invite",
        "description" : "",
        "operationId" : "inviteUserGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Invite token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserAccount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Accept invite",
        "description" : "",
        "operationId" : "inviteUserAccept",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Invite token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InviteUserAccept"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserAccount"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/user/reset_password" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Reset password request",
        "description" : "",
        "operationId" : "resetPassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserResetRequestPassword"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/user/reset_password/{token}" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Reset password",
        "description" : "",
        "operationId" : "resetPasswordWithToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Reset password token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ResetUserPassword"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/user/{id}/verify_email" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Send verification email",
        "description" : "",
        "operationId" : "verifyEmailRequest",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/user/verify_email/{token}" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Verify email",
        "description" : "",
        "operationId" : "verifyEmail",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Verify email token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/webhook/{id}" : {
      "get" : {
        "tags" : [ "webhook" ],
        "summary" : "Get webhooks",
        "description" : "",
        "operationId" : "getWebhook",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Webhook id or event id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Webhook"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/webhook" : {
      "get" : {
        "tags" : [ "webhook" ],
        "summary" : "Get list of webhooks",
        "description" : "",
        "operationId" : "getWebhooks",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "size",
          "in" : "query",
          "description" : "Page size. A maximum of 100 is allowed.",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "maximum" : 100,
          "minimum" : 1,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Optional state to filter on, one of the following: `pending`, `disabled`, `failed`, `completed`",
          "required" : false,
          "type" : "string",
          "x-example" : "pending",
          "enum" : [ "pending", "disabled", "failed", "completed" ]
        }, {
          "name" : "created_before",
          "in" : "query",
          "description" : "Get webhooks created before this date, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format. Use last created date as filter for next page.",
          "required" : true,
          "type" : "string",
          "x-example" : "2015-06-14T08:12:19.558+00:00"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Webhook"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/webhook/{id}/request" : {
      "get" : {
        "tags" : [ "webhook" ],
        "summary" : "Get webhook requests",
        "description" : "",
        "operationId" : "getWebhookRequests",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Webhook id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/WebhookRequest"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/webhook/resend" : {
      "post" : {
        "tags" : [ "webhook" ],
        "summary" : "Re-send webhooks",
        "description" : "",
        "operationId" : "resendJson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/WebhookResendRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Webhook"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/webhook/disable" : {
      "post" : {
        "tags" : [ "webhook" ],
        "summary" : "Disable webhooks",
        "description" : "",
        "operationId" : "disableWebhooks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/WebhookDisableRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Webhook"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    },
    "/v1/webhook/update" : {
      "post" : {
        "tags" : [ "webhook" ],
        "summary" : "Update and resend webhooks",
        "description" : "",
        "operationId" : "updateWebhooks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/WebhookUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Webhook"
              }
            }
          },
          "400" : {
            "description" : "Invalid request, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "401" : {
            "description" : "None or invalid credentials provided in access to secured resource",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not authorized to perform resource operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource or referenced resource not found, see error codes at https://api.reepay.com/v1/error_codes",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "Internal service error, error is reported automatically to Reepay",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        }, {
          "apiKey" : [ ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "basicAuth" : {
      "type" : "basic"
    }
  },
  "definitions" : {
    "Key" : {
      "type" : "object",
      "required" : [ "created", "key" ],
      "properties" : {
        "key" : {
          "type" : "string",
          "example" : "priv_fcfac2016614418f969fa5697383e47c",
          "description" : "Api key"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Key creation date. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        }
      }
    },
    "ErrorResponse" : {
      "type" : "object",
      "required" : [ "code", "error", "http_reason", "http_status", "path", "request_id", "timestamp" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Reepay API error code",
          "minimum" : 1,
          "maximum" : 64
        },
        "error" : {
          "type" : "string",
          "example" : "Subscription not found",
          "description" : "Short error message"
        },
        "message" : {
          "type" : "string",
          "description" : "Optional clarifying error message"
        },
        "path" : {
          "type" : "string",
          "example" : "/v1/subscription/sub0019",
          "description" : "The path generating the error response"
        },
        "timestamp" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-14T08:12:19.558+0000",
          "description" : "Timestamp for the error response in ISO-8601 extended offset date-time format"
        },
        "http_status" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 404,
          "description" : "HTTP status code of the error"
        },
        "http_reason" : {
          "type" : "string",
          "example" : "Not Found",
          "description" : "HTTP reason of the error"
        },
        "request_id" : {
          "type" : "string",
          "example" : "f1988fc2374b4a26a51ebd876b478428",
          "description" : "Request-Id for the failed request"
        },
        "transaction_error" : {
          "type" : "string",
          "example" : "credit_card_expired",
          "description" : "Optional transaction error in the case the request involved a transaction processing. See [transaction errors](https://docs.reepay.com/api/#transaction-errors)."
        }
      },
      "description" : "Generic error response"
    },
    "WebhookSettings" : {
      "type" : "object",
      "required" : [ "disabled", "secret", "urls" ],
      "properties" : {
        "urls" : {
          "type" : "array",
          "description" : "Webhook urls",
          "items" : {
            "type" : "string"
          }
        },
        "username" : {
          "type" : "string",
          "example" : "myuser",
          "description" : "Optional HTTP Basic Auth username"
        },
        "password" : {
          "type" : "string",
          "example" : "mypassword",
          "description" : "Optional HTTP Basic Auth password"
        },
        "disabled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Webhook disabled"
        },
        "secret" : {
          "type" : "string",
          "example" : "webhook_secret_dafba2016614418f969fa5697383e47c",
          "description" : "Webhook secret used for signature"
        },
        "alert_emails" : {
          "type" : "array",
          "description" : "Optional list of emails to send alert to if webhook fails",
          "items" : {
            "type" : "string"
          }
        },
        "alert_count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of requests to perform before alert email is sent, must be greater than or equal to four (1 hour)",
          "minimum" : 4
        }
      }
    },
    "UpdateWebhookSettings" : {
      "type" : "object",
      "required" : [ "disabled", "urls" ],
      "properties" : {
        "urls" : {
          "type" : "array",
          "description" : "Webhook urls",
          "items" : {
            "type" : "string"
          }
        },
        "username" : {
          "type" : "string",
          "example" : "myuser",
          "description" : "Optional HTTP Basic Auth username"
        },
        "password" : {
          "type" : "string",
          "example" : "mypassword",
          "description" : "Optional HTTP Basic Auth password"
        },
        "disabled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Webhook disabled"
        },
        "alert_emails" : {
          "type" : "array",
          "description" : "Optional list of emails to send alert to if webhook fails",
          "items" : {
            "type" : "string"
          }
        },
        "alert_count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of requests to perform before alert email is sent, must be greater than or equal to four (1 hour)",
          "minimum" : 4
        }
      }
    },
    "MailSettings" : {
      "type" : "object",
      "required" : [ "default_from" ],
      "properties" : {
        "bcc" : {
          "type" : "string",
          "example" : "accounting@example.com",
          "description" : "Optional Bcc email address to use for all mails. Rfc 822 address."
        },
        "default_from" : {
          "type" : "string",
          "example" : "My Company Support <support@example.com>",
          "description" : "Default email sender address. Rfc 822 address."
        },
        "reply_to" : {
          "type" : "string",
          "example" : "My Company Support <support@example.com>",
          "description" : "Optional Reply-To email address. Rfc 822 address."
        }
      }
    },
    "DiscountSettings" : {
      "type" : "object",
      "required" : [ "discount_apply_order", "discount_percentage_apply", "multiple_allowed" ],
      "properties" : {
        "discount_apply_order" : {
          "type" : "string",
          "example" : "percentage_first",
          "description" : "The order to apply multiple discounts in, one of the following: `percentage_first`, `amount_first`",
          "enum" : [ "percentage_first", "amount_first" ]
        },
        "discount_percentage_apply" : {
          "type" : "string",
          "example" : "full",
          "description" : "The rule for applying multiple percentage discounts, one of the following: `full`, `compound`",
          "enum" : [ "full", "compound" ]
        },
        "multiple_allowed" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If multiple discounts per subscription is allowed"
        }
      }
    },
    "Account" : {
      "type" : "object",
      "required" : [ "country", "created", "currency", "default_vat", "handle", "id", "locale", "name", "organisation", "state", "timezone" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "test_account",
          "description" : "Per organisation unique handle for the account"
        },
        "currency" : {
          "type" : "string",
          "example" : "DKK",
          "description" : "Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code"
        },
        "name" : {
          "type" : "string",
          "example" : "DK Account",
          "description" : "Account name"
        },
        "address" : {
          "type" : "string",
          "example" : "Amagerfaellevej 56",
          "description" : "Account address"
        },
        "address2" : {
          "type" : "string",
          "example" : "Room 1.0.1",
          "description" : "Account address2"
        },
        "city" : {
          "type" : "string",
          "example" : "Copenhagen",
          "description" : "Account city"
        },
        "locale" : {
          "type" : "string",
          "example" : "da_DK",
          "description" : "Account locale on the form 'language_country'"
        },
        "timezone" : {
          "type" : "string",
          "example" : "Europe/Copenhagen",
          "description" : "Account time zone ID as abbreviation or full name. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)"
        },
        "country" : {
          "type" : "string",
          "example" : "DK",
          "description" : "Account country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)"
        },
        "email" : {
          "type" : "string",
          "example" : "robert@reepay.com",
          "description" : "Account email"
        },
        "phone" : {
          "type" : "string",
          "example" : "26777008",
          "description" : "Account phone"
        },
        "vat" : {
          "type" : "string",
          "example" : "DK23123121",
          "description" : "Account vat number"
        },
        "website" : {
          "type" : "string",
          "example" : "http://www.example.com",
          "description" : "Account website"
        },
        "logo" : {
          "type" : "string",
          "example" : "http://reepay.com/images/logo.svg",
          "description" : "Account logo url"
        },
        "id" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Account id assigned by Reepay"
        },
        "organisation" : {
          "type" : "string",
          "example" : "Reepay",
          "description" : "Organisation by subdomain"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the account was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "state" : {
          "type" : "string",
          "example" : "live",
          "description" : "Status of the account one of the following `test`, `live`, `closed`, `demo`.",
          "enum" : [ "test", "live", "closed", "demo" ]
        },
        "postal_code" : {
          "type" : "string",
          "example" : "2300",
          "description" : "Account postal code"
        },
        "default_vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Default vat for account",
          "minimum" : 0,
          "maximum" : 1
        }
      }
    },
    "UpdateAccount" : {
      "type" : "object",
      "required" : [ "country", "default_vat", "handle", "locale", "name", "timezone" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "test_account",
          "description" : "Per organisation unique handle for the account"
        },
        "currency" : {
          "type" : "string",
          "example" : "DKK",
          "description" : "Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code"
        },
        "name" : {
          "type" : "string",
          "example" : "DK Account",
          "description" : "Account name"
        },
        "address" : {
          "type" : "string",
          "example" : "Amagerfaellevej 56",
          "description" : "Account address"
        },
        "address2" : {
          "type" : "string",
          "example" : "Room 1.0.1",
          "description" : "Account address2"
        },
        "city" : {
          "type" : "string",
          "example" : "Copenhagen",
          "description" : "Account city"
        },
        "locale" : {
          "type" : "string",
          "example" : "da_DK",
          "description" : "Account locale on the form 'language_country'"
        },
        "timezone" : {
          "type" : "string",
          "example" : "Europe/Copenhagen",
          "description" : "Account time zone ID as abbreviation or full name. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)"
        },
        "country" : {
          "type" : "string",
          "example" : "DK",
          "description" : "Account country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)"
        },
        "email" : {
          "type" : "string",
          "example" : "robert@reepay.com",
          "description" : "Account email"
        },
        "phone" : {
          "type" : "string",
          "example" : "26777008",
          "description" : "Account phone"
        },
        "vat" : {
          "type" : "string",
          "example" : "DK23123121",
          "description" : "Account vat number"
        },
        "website" : {
          "type" : "string",
          "example" : "http://www.example.com",
          "description" : "Account website"
        },
        "logo" : {
          "type" : "string",
          "example" : "http://reepay.com/images/logo.svg",
          "description" : "Account logo url"
        },
        "postal_code" : {
          "type" : "string",
          "example" : "2300",
          "description" : "Account postal code"
        },
        "default_vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Default vat for account",
          "minimum" : 0,
          "maximum" : 1
        }
      }
    },
    "AddOn" : {
      "type" : "object",
      "required" : [ "amount", "created", "handle", "name", "state", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Additional users",
          "description" : "Name of add-on. Will be used as order line text."
        },
        "description" : {
          "type" : "string",
          "example" : "Add-on for adding additional users to subscription",
          "description" : "Optional description of add-on"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 5000,
          "description" : "Add-on amount",
          "minimum" : 0
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for add-on. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "handle" : {
          "type" : "string",
          "example" : "add_on_001",
          "description" : "Per account unique handle for the add-on"
        },
        "type" : {
          "type" : "string",
          "example" : "quantity",
          "description" : "Add-on type `on_off` or `quantity`. An `on_off` type cannot be given a quantity when attached to subscription. Fo `quantity` type it is possible.",
          "enum" : [ "on_off", "quantity" ]
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "Add-on state `active` or `deleted`.",
          "enum" : [ "active", "deleted" ]
        },
        "deleted" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-08-04T14:41:30.333+0000",
          "description" : "Date when the add-on was deleted if deleted. In ISO-8601 extended offset date-time format."
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-07-04T12:40:56.656+0000",
          "description" : "Date when the add-on was created. In ISO-8601 extended offset date-time format."
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the amount is including VAT. Default true."
        },
        "all_plans" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether all plans are eligible for this add-on. Defaults to false."
        },
        "eligible_plans" : {
          "type" : "array",
          "description" : "If not `all_plans` are set to true, then the set of eligible plan handles must be defined.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "CreateAddOn" : {
      "type" : "object",
      "required" : [ "amount", "handle", "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Additional users",
          "description" : "Name of add-on. Will be used as order line text."
        },
        "description" : {
          "type" : "string",
          "example" : "Add-on for adding additional users to subscription",
          "description" : "Optional description of add-on"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 5000,
          "description" : "Add-on amount",
          "minimum" : 0
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for add-on. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "handle" : {
          "type" : "string",
          "example" : "add_on_001",
          "description" : "Per account unique handle for the add-on"
        },
        "type" : {
          "type" : "string",
          "example" : "quantity",
          "description" : "Add-on type `on_off` or `quantity`. An `on_off` type cannot be given a quantity when attached to subscription. Fo `quantity` type it is possible.",
          "enum" : [ "on_off", "quantity" ]
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the amount is including VAT. Default true."
        },
        "all_plans" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether all plans are eligible for this add-on. Defaults to false."
        },
        "eligible_plans" : {
          "type" : "array",
          "description" : "If not `all_plans` are set to true, then the set of eligible plan handles must be defined.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "UpdateAddOn" : {
      "type" : "object",
      "required" : [ "amount", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Additional users",
          "description" : "Name of add-on. Will be used as order line text."
        },
        "description" : {
          "type" : "string",
          "example" : "Add-on for adding additional users to subscription",
          "description" : "Optional description of add-on"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 5000,
          "description" : "Add-on amount",
          "minimum" : 0
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for add-on. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the amount is including VAT. Default true."
        },
        "all_plans" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether all plans are eligible for this add-on. Defaults to false."
        },
        "eligible_plans" : {
          "type" : "array",
          "description" : "If not `all_plans` are set to true, then the set of eligible plan handles must be defined.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "AddOnSearch" : {
      "type" : "object",
      "required" : [ "content", "count", "page", "size", "total_elements", "total_pages" ],
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Number of current page in paginated list",
          "minimum" : 1
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Page size in paginated list",
          "minimum" : 1
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Number of elements in current page",
          "minimum" : 0
        },
        "search" : {
          "type" : "string",
          "example" : "state:active,handle;myhandle",
          "description" : "Optional search expression used"
        },
        "sort" : {
          "type" : "string",
          "example" : "-created",
          "description" : "Optional sort expression used"
        },
        "content" : {
          "type" : "array",
          "description" : "List of add-ons for current page",
          "items" : {
            "$ref" : "#/definitions/AddOn"
          }
        },
        "total_elements" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 500,
          "description" : "Total number of elements in paginated list",
          "minimum" : 0
        },
        "total_pages" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "Total number of pages in paginated list",
          "minimum" : 0
        }
      },
      "description" : "A page in a paginated add-on search"
    },
    "AdditionalCost" : {
      "type" : "object",
      "required" : [ "amount", "amount_ex_vat", "amount_incl_vat", "amount_vat", "created", "handle", "ordertext", "state", "subscription" ],
      "properties" : {
        "invoice" : {
          "type" : "string",
          "example" : "1f71771bfbfc40eabf6df4cc2e31d853",
          "description" : "Invoice id for the invoice the additional cost has been assigned to once it has been transferred"
        },
        "state" : {
          "type" : "string",
          "example" : "pending",
          "description" : "State of the additional cost, one of the following: `pending`, `transferred`, `cancelled`. A pending additonal cost has not yet been transferred to a invoice. Cancelled addtional costs have been cancelled manually.",
          "enum" : [ "pending", "transferred", "cancelled" ]
        },
        "subscription" : {
          "type" : "string",
          "example" : "sub000219",
          "description" : "Subscription handle"
        },
        "handle" : {
          "type" : "string",
          "example" : "cost032",
          "description" : "Per account unique handle for the additional cost"
        },
        "ordertext" : {
          "type" : "string",
          "example" : "Yoga mat",
          "description" : "Order text for the additional cost. Will be on affected invoices."
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Quantity for the additional cost. Default 1.",
          "minimum" : 1
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Additional cost total amount",
          "minimum" : 0
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for additional cost. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the additional cost was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the amount is including VAT. Default true."
        },
        "amount_vat" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2000,
          "description" : "Additional cost vat amount"
        },
        "amount_ex_vat" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 8000,
          "description" : "Additional cost amount without vat"
        }
      }
    },
    "CreateAdditionalCost" : {
      "type" : "object",
      "required" : [ "amount", "handle", "ordertext", "subscription" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "cost032",
          "description" : "Per account unique handle for the additional cost"
        },
        "ordertext" : {
          "type" : "string",
          "example" : "Yoga mat",
          "description" : "Order text for the additional cost. Will be on affected invoices."
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Quantity for the additional cost. Default 1.",
          "minimum" : 1
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Per quantity amount in the smallest unit for the account currency",
          "minimum" : 0
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for additional cost. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "subscription" : {
          "type" : "string",
          "example" : "sub000219",
          "description" : "Subscription handle"
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the per quantity amount is including VAT. Defaults to true."
        }
      }
    },
    "CardGatewayAgreement" : {
      "type" : "object",
      "required" : [ "card_types", "gw_ref", "provider" ],
      "properties" : {
        "provider" : {
          "type" : "string",
          "example" : "test",
          "description" : "Card gateway provider type"
        },
        "card_types" : {
          "type" : "array",
          "description" : "Card types supported by agreement",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "provider_settings" : {
          "type" : "object",
          "description" : "Key value map of provider settings",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "threed_secure" : {
          "type" : "boolean",
          "description" : "Use 3DSecure for non-recurring payments (if supported by provider)"
        },
        "threed_secure_recurring" : {
          "type" : "boolean",
          "description" : "Use 3DSecure for recurring payments (if supported by provider)"
        },
        "secured_by_nets" : {
          "type" : "boolean",
          "description" : "Use Secured By Nets for non-recurring payments (if supported by provider)"
        },
        "secured_by_nets_recurring" : {
          "type" : "boolean",
          "description" : "Use Secured By Nets for recurring payments (if supported by provider)"
        },
        "gw_ref" : {
          "type" : "string",
          "example" : "657e86162633415a9e6b715248c84da4",
          "description" : "Card gateway reference id"
        }
      }
    },
    "GatewayAgreement" : {
      "type" : "object",
      "required" : [ "created", "id", "state", "test", "type", "usage" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "0943a00c8b0c48f28c637a8a2fd268f1",
          "description" : "Agreement id"
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "Agreement state: `active`, `disabled`, `pending` or `deleted`",
          "enum" : [ "active", "disabled", "pending", "deleted" ]
        },
        "type" : {
          "type" : "string",
          "example" : "card",
          "description" : "Agreement type: `card`, `viabill`, `mobilepay`, `mobilepay_subscription`",
          "enum" : [ "creditcard", "viabill", "mobilepay", "mobilepay_subscription" ]
        },
        "usage" : {
          "type" : "string",
          "example" : "reusable",
          "description" : "Agreement payment type usage: `single`, `reusable`, `subscription`",
          "enum" : [ "single", "reusable", "subscription" ]
        },
        "test" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Test agreement or not"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the agreement was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "card_gateway_agreement" : {
          "description" : "Card gateway agreement details in case of card gateway",
          "$ref" : "#/definitions/CardGatewayAgreement"
        },
        "pgw_agreement" : {
          "description" : "Payment gateway in case of payment gateway",
          "$ref" : "#/definitions/PgwAgreement"
        },
        "mobile_pay_subscription_agreement" : {
          "description" : "MobilePay subscription agreement details in case of MobilePay subscription",
          "$ref" : "#/definitions/MobilePaySubscriptionAgreement"
        }
      }
    },
    "MobilePaySubscriptionAgreement" : {
      "type" : "object",
      "required" : [ "ref" ],
      "properties" : {
        "ref" : {
          "type" : "string",
          "example" : "657e86162633415a9e6b715248c844",
          "description" : "MobilePay subscription gateway reference"
        }
      }
    },
    "PgwAgreement" : {
      "type" : "object",
      "required" : [ "payment_type" ],
      "properties" : {
        "api_key" : {
          "type" : "string",
          "description" : "Pgw API key"
        },
        "payment_type" : {
          "type" : "string",
          "example" : "mobilepay",
          "description" : "Payment gateway payment type",
          "enum" : [ "mobilepay", "viabill" ]
        }
      }
    },
    "CreateCardGatewayAgreement" : {
      "type" : "object",
      "required" : [ "card_types", "provider" ],
      "properties" : {
        "provider" : {
          "type" : "string",
          "example" : "test",
          "description" : "Card gateway provider type"
        },
        "card_types" : {
          "type" : "array",
          "description" : "Card types supported by agreement",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "provider_settings" : {
          "type" : "object",
          "description" : "Key value map of provider settings",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "threed_secure" : {
          "type" : "boolean",
          "description" : "Use 3DSecure for non-recurring payments (if supported by provider)"
        },
        "threed_secure_recurring" : {
          "type" : "boolean",
          "description" : "Use 3DSecure for recurring payments (if supported by provider)"
        },
        "secured_by_nets" : {
          "type" : "boolean",
          "description" : "Use Secured By Nets for non-recurring payments (if supported by provider)"
        },
        "secured_by_nets_recurring" : {
          "type" : "boolean",
          "description" : "Use Secured By Nets for recurring payments (if supported by provider)"
        }
      }
    },
    "UpdateCardGatewayAgreement" : {
      "type" : "object",
      "required" : [ "card_types" ],
      "properties" : {
        "card_types" : {
          "type" : "array",
          "description" : "Card types supported by agreement",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "provider_settings" : {
          "type" : "object",
          "description" : "Key value map of provider settings",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "threed_secure" : {
          "type" : "boolean",
          "description" : "Use 3DSecure for non-recurring payments (if supported by provider)"
        },
        "threed_secure_recurring" : {
          "type" : "boolean",
          "description" : "Use 3DSecure for recurring payments (if supported by provider)"
        },
        "secured_by_nets" : {
          "type" : "boolean",
          "description" : "Use Secured By Nets for non-recurring payments (if supported by provider)"
        },
        "secured_by_nets_recurring" : {
          "type" : "boolean",
          "description" : "Use Secured By Nets for recurring payments (if supported by provider)"
        }
      }
    },
    "UpdatePgwAgreement" : {
      "type" : "object",
      "properties" : {
        "api_key" : {
          "type" : "string",
          "description" : "Pgw API key"
        }
      }
    },
    "MobilePaySubscriptionAgreementPrepareResponse" : {
      "type" : "object",
      "properties" : {
        "agreement" : {
          "description" : "The prepared gateway agreement",
          "$ref" : "#/definitions/GatewayAgreement"
        },
        "mobile_pay_payload" : {
          "type" : "object",
          "description" : "Json payload from MobilePay service",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "AccountLogin" : {
      "type" : "object",
      "required" : [ "currency", "handle", "id", "locale", "name", "organisation", "state", "timezone" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Account id assigned by Reepay"
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "Status of the account one of the following `test`, `live`, `closed`, `demo`.",
          "enum" : [ "test", "live", "closed", "demo" ]
        },
        "organisation" : {
          "type" : "string",
          "example" : "Reepay",
          "description" : "Organisation by subdomain handle"
        },
        "handle" : {
          "type" : "string",
          "example" : "test_account",
          "description" : "Per organisation unique handle for the account"
        },
        "currency" : {
          "type" : "string",
          "example" : "DKK",
          "description" : "Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code"
        },
        "name" : {
          "type" : "string",
          "example" : "DK Account",
          "description" : "Account name"
        },
        "locale" : {
          "type" : "string",
          "example" : "da_DK",
          "description" : "Account locale on the form 'language_country'"
        },
        "timezone" : {
          "type" : "string",
          "example" : "Europe/Copenhagen",
          "description" : "Account time zone ID as abbreviation or full name. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)"
        }
      }
    },
    "Organisation" : {
      "type" : "object",
      "required" : [ "created", "id", "live_date", "name", "privileges", "state", "subdomain" ],
      "properties" : {
        "subdomain" : {
          "type" : "string",
          "example" : "mycompany",
          "description" : "Organisation subdomain handle in Reepay. Must match [a-z0-9-] and maximum length 64."
        },
        "name" : {
          "type" : "string",
          "example" : "My Company",
          "description" : "Organisation name"
        },
        "id" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Organisation id assigned by Reepay"
        },
        "state" : {
          "type" : "string",
          "example" : "signup",
          "description" : "Status of the organisation one of the following `signup`, `live`",
          "enum" : [ "signup", "live" ]
        },
        "privileges" : {
          "type" : "array",
          "description" : "Set of privileges for organisation",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the organisation was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "live_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the organisation went live. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        }
      }
    },
    "OrganisationLogin" : {
      "type" : "object",
      "required" : [ "accounts", "id", "name", "subdomain" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "d9258a20313242ccb82fac77b6e862f9",
          "description" : "Organisation id assigned by Reepay"
        },
        "subdomain" : {
          "type" : "string",
          "example" : "mydomain",
          "description" : "Organisation subdomain"
        },
        "name" : {
          "type" : "string",
          "example" : "My Organisation",
          "description" : "Organisation name"
        },
        "accounts" : {
          "type" : "array",
          "description" : "Organisation accounts",
          "items" : {
            "$ref" : "#/definitions/AccountLogin"
          }
        }
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "email", "id", "verified_email" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "fbfab4017714418f969fa5697383e47c",
          "description" : "Unique id for the user assigned by Reepay"
        },
        "email" : {
          "type" : "string",
          "example" : "test@example.com",
          "description" : "User email"
        },
        "name" : {
          "type" : "string",
          "example" : "John Johnson",
          "description" : "User name"
        },
        "verified_email" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Email verified"
        }
      }
    },
    "UserLogin" : {
      "type" : "object",
      "required" : [ "account", "groups", "organisation", "organisations", "permissions", "token", "token_ttl", "user" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJiY2Y3MDg0OS1kNTEzLTQ4YW",
          "description" : "Authentication token to use in X-Auth-Token"
        },
        "user" : {
          "description" : "Logged in user",
          "$ref" : "#/definitions/User"
        },
        "account" : {
          "description" : "Account logged into",
          "$ref" : "#/definitions/AccountLogin"
        },
        "organisation" : {
          "description" : "Organisation for account logged into",
          "$ref" : "#/definitions/Organisation"
        },
        "organisations" : {
          "type" : "array",
          "description" : "List of organisations for user",
          "items" : {
            "$ref" : "#/definitions/OrganisationLogin"
          }
        },
        "groups" : {
          "type" : "array",
          "description" : "List user groups",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "permissions" : {
          "type" : "array",
          "description" : "List user permissions",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "token_ttl" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3600,
          "description" : "Token time-to-live in minutes"
        }
      }
    },
    "UserRenew" : {
      "type" : "object",
      "required" : [ "token", "token_ttl" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJiY2Y3MDg0OS1kNTEzLTQ4YW",
          "description" : "Authentication token to use in X-Auth-Token"
        },
        "token_ttl" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3600,
          "description" : "Token time-to-live in minutes"
        }
      }
    },
    "Charge" : {
      "type" : "object",
      "required" : [ "amount", "created", "currency", "customer", "handle", "order_lines", "refunded_amount", "source", "state" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "order-0000213",
          "description" : "Per account unique reference to charge/invoice. E.g. order id from own system. Multiple payments can be attempted for the same handle but only one succeeded charge can exist per handle. Max length 255 with allowable characters [a-zA-Z0-9_.-@]."
        },
        "state" : {
          "type" : "string",
          "example" : "authorized",
          "description" : "The charge state one of the following: `authorized`, `settled`, `failed`, `cancelled`",
          "enum" : [ "authorized", "settled", "failed", "cancelled" ]
        },
        "customer" : {
          "type" : "string",
          "example" : "customer006",
          "description" : "Customer handle"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "The invoice amount including VAT",
          "minimum" : 0
        },
        "currency" : {
          "type" : "string",
          "example" : "DKK",
          "description" : "Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code"
        },
        "authorized" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the charge was authorized, if the charge went through an authorize and settle flow, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "settled" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the charge was settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "cancelled" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the charge was cancelled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the invoice was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "transaction" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Transaction id assigned by Reepay. Assigned when transaction is performed."
        },
        "error" : {
          "type" : "string",
          "example" : "credit_card_expired",
          "description" : "Reepay error code if failed. See [transaction errors](https://docs.reepay.com/api/#transaction-errors)."
        },
        "source" : {
          "description" : "Object describing the source for the charge. E.g. credit card.",
          "$ref" : "#/definitions/ChargeSource"
        },
        "order_lines" : {
          "type" : "array",
          "description" : "Order lines for charge",
          "items" : {
            "$ref" : "#/definitions/OrderLine"
          }
        },
        "refunded_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50000,
          "description" : "Refunded amount"
        },
        "error_state" : {
          "type" : "string",
          "example" : "hard_declined",
          "description" : "Reepay error state if failed: `soft_declined`, `hard_declined` or `processing_error`. Soft and hard declines indicate a card decline. A soft decline is possibly recoverable and a subsequent request with the same card may succeed. E.g. insufficient funds. A processing error indicates an error processing the card either at Reepay, the acquirer, or between Reepay amd the acquirer.",
          "enum" : [ "soft_declined", "hard_declined", "processing_error" ]
        },
        "recurring_payment_method" : {
          "type" : "string",
          "example" : "ca_0d53b3c057ac262647b482184d5fd574",
          "description" : "Optional reference to recurring payment method created in conjunction with charging"
        },
        "billing_address" : {
          "description" : "Optional billing address",
          "$ref" : "#/definitions/InvoiceBillingAddress"
        },
        "shipping_address" : {
          "description" : "Optional shipping address",
          "$ref" : "#/definitions/InvoiceShippingAddress"
        }
      }
    },
    "ChargeSearch" : {
      "type" : "object",
      "required" : [ "content", "count", "page", "size", "total_elements", "total_pages" ],
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Number of current page in paginated list",
          "minimum" : 1
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Page size in paginated list",
          "minimum" : 1
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Number of elements in current page",
          "minimum" : 0
        },
        "search" : {
          "type" : "string",
          "example" : "state:active,handle;myhandle",
          "description" : "Optional search expression used"
        },
        "sort" : {
          "type" : "string",
          "example" : "-created",
          "description" : "Optional sort expression used"
        },
        "content" : {
          "type" : "array",
          "description" : "List of charges for current page",
          "items" : {
            "$ref" : "#/definitions/Charge"
          }
        },
        "total_elements" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 500,
          "description" : "Total number of elements in paginated list",
          "minimum" : 0
        },
        "total_pages" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "Total number of pages in paginated list",
          "minimum" : 0
        }
      },
      "description" : "A page in a paginated charge search"
    },
    "ChargeSource" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "card",
          "description" : "Type of charge source: `card`, `card_token`, `mobilepay` or `viabill`",
          "enum" : [ "card", "card_token", "mobilepay", "viabill" ]
        },
        "card" : {
          "type" : "string",
          "example" : "ca_80437fbb75cc5ec47aee09ff160e9cb9",
          "description" : "Reference to customer card if source type `card`"
        },
        "fingerprint" : {
          "type" : "string",
          "example" : "cst_64e8a26cc0e85bc3f5ce7c5b366b4096",
          "description" : "Uniquely identifies this particular card number if credit card source"
        },
        "auth_transaction" : {
          "type" : "string",
          "example" : "4f3b975246e6acb7f569297d67830d64",
          "description" : "Reference to authorization transaction if charge is settled after authorization"
        },
        "card_type" : {
          "type" : "string",
          "example" : "visa",
          "description" : "Card type if credit card source: `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover` or `jcb`",
          "enum" : [ "unknown", "visa", "mc", "dankort", "visa_dk", "visa_elec", "maestro", "laser", "amex", "diners", "discover", "jcb" ]
        },
        "exp_date" : {
          "type" : "string",
          "example" : "09-18",
          "description" : "Card expire date on form MM-YY if credit card source"
        },
        "masked_card" : {
          "type" : "string",
          "example" : "457111XXXXXX3777",
          "description" : "Masked card number if credit card source"
        },
        "strong_authentication_status" : {
          "type" : "string",
          "example" : "secured_by_nets",
          "description" : "Status for strong customer authentication: `threed_secure`, `threed_secure_not_enrolled, `threed_secure_local_only`, `secured_by_nets`",
          "enum" : [ "threed_secure", "threed_secure_not_enrolled", "threed_secure_local_only", "secured_by_nets" ]
        }
      }
    },
    "InvoiceBillingAddress" : {
      "type" : "object",
      "properties" : {
        "company" : {
          "type" : "string",
          "example" : "Leones Cars",
          "description" : "Company name"
        },
        "vat" : {
          "type" : "string",
          "example" : "US123456789",
          "description" : "Company vat number"
        },
        "attention" : {
          "type" : "string",
          "example" : "Mary Schmidt",
          "description" : "Attention"
        },
        "address" : {
          "type" : "string",
          "example" : "Grove Street 12",
          "description" : "Address line 1"
        },
        "address2" : {
          "type" : "string",
          "example" : "Ganton",
          "description" : "Address line 2"
        },
        "city" : {
          "type" : "string",
          "example" : "Los Santos",
          "description" : "City"
        },
        "country" : {
          "type" : "string",
          "example" : "US",
          "description" : "Country in ISO 3166-1 alpha-2"
        },
        "email" : {
          "type" : "string",
          "example" : "carl@leone.com",
          "description" : "Email"
        },
        "phone" : {
          "type" : "string",
          "example" : "555-gotcars",
          "description" : "Phone number"
        },
        "first_name" : {
          "type" : "string",
          "example" : "Carl",
          "description" : "First name"
        },
        "last_name" : {
          "type" : "string",
          "example" : "Johnson",
          "description" : "Last name"
        },
        "postal_code" : {
          "type" : "string",
          "example" : "4531",
          "description" : "Postal code"
        },
        "state_or_province" : {
          "type" : "string",
          "example" : "Alaska",
          "description" : "State or province"
        }
      }
    },
    "InvoiceShippingAddress" : {
      "type" : "object",
      "properties" : {
        "company" : {
          "type" : "string",
          "example" : "Leones Cars",
          "description" : "Company name"
        },
        "vat" : {
          "type" : "string",
          "example" : "US123456789",
          "description" : "Company vat number"
        },
        "attention" : {
          "type" : "string",
          "example" : "Mary Schmidt",
          "description" : "Attention"
        },
        "address" : {
          "type" : "string",
          "example" : "Grove Street 12",
          "description" : "Address line 1"
        },
        "address2" : {
          "type" : "string",
          "example" : "Ganton",
          "description" : "Address line 2"
        },
        "city" : {
          "type" : "string",
          "example" : "Los Santos",
          "description" : "City"
        },
        "country" : {
          "type" : "string",
          "example" : "US",
          "description" : "Country in ISO 3166-1 alpha-2"
        },
        "email" : {
          "type" : "string",
          "example" : "carl@leone.com",
          "description" : "Email"
        },
        "phone" : {
          "type" : "string",
          "example" : "555-gotcars",
          "description" : "Phone number"
        },
        "first_name" : {
          "type" : "string",
          "example" : "Carl",
          "description" : "First name"
        },
        "last_name" : {
          "type" : "string",
          "example" : "Johnson",
          "description" : "Last name"
        },
        "postal_code" : {
          "type" : "string",
          "example" : "4531",
          "description" : "Postal code"
        },
        "state_or_province" : {
          "type" : "string",
          "example" : "Alaska",
          "description" : "State or province"
        }
      }
    },
    "OrderLine" : {
      "type" : "object",
      "required" : [ "amount", "amount_defined_incl_vat", "amount_ex_vat", "amount_vat", "id", "ordertext", "origin", "quantity", "timestamp", "unit_amount", "unit_amount_ex_vat", "unit_amount_vat", "vat" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "c33fbb06a00e4dc0b9055f6fb509c0ed",
          "description" : "Per account unique order line id"
        },
        "ordertext" : {
          "type" : "string",
          "example" : "Product X",
          "description" : "Order line text"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 15000,
          "description" : "Order line total amount including vat"
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Order line vat percent"
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Order line quantity",
          "minimum" : 1
        },
        "origin" : {
          "type" : "string",
          "example" : "plan",
          "description" : "Order line origin, one of the following: `plan`, `add_on`, `ondemand`, `additional_cost`, `credit`, `discount`, `setup_fee`",
          "enum" : [ "plan", "add_on", "ondemand", "additional_cost", "credit", "discount", "setup_fee" ]
        },
        "timestamp" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Timestamp from order line origin, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "discounted_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2000,
          "description" : "Order line amount after potential discount has been deducted"
        },
        "amount_vat" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3000,
          "description" : "Order line total vat amount"
        },
        "amount_ex_vat" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12000,
          "description" : "Order line total amount without vat"
        },
        "unit_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 15000,
          "description" : "Order line unit amount including vat"
        },
        "unit_amount_vat" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3000,
          "description" : "Order line unit vat amount"
        },
        "unit_amount_ex_vat" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12000,
          "description" : "Order line unit amount without vat"
        },
        "amount_defined_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the amount was defined including VAT. E.g. plan amount defined including VAT."
        },
        "origin_handle" : {
          "type" : "string",
          "example" : "c33fbb06a00e4dc0b9055f6fb509c0ed",
          "description" : "Handle for additional cost, credit, plan or subscription discount in the case one of those are the origin"
        },
        "period_from" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "The start of billing period if the order line is a plan order line for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "period_to" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-04T12:40:56.656+00:00",
          "description" : "The end of billing period if the order line is a plan order line for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "discount_percentage" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 25,
          "description" : "The discount percentage for discount order lines that has a percentage discount"
        },
        "discounted_order_line" : {
          "type" : "string",
          "example" : "423434534252345sdafsdfa5435",
          "description" : "For discount order lines a reference to the order line for which the order line is a discount"
        }
      }
    },
    "CreateCharge" : {
      "type" : "object",
      "required" : [ "handle", "source" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "order-0000213",
          "description" : "Per account unique reference to charge/invoice. E.g. order id from own system. Multiple payments can be attempted for the same handle but only one authorized or settled charge can exist per handle. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. It is recommended to use a maximum of 20 characters as this will allow for the use of handle as reference on bank statements without truncation."
        },
        "key" : {
          "type" : "string",
          "example" : "5ee00b2b-effb-453e-a246-c3cc26acaeb9",
          "description" : "Optional idempotency key. Only one authorization or settle can be performed for the same handle. If two create attempts are attempted and the first succeeds the second will fail because charge is already settled or authorized. An idempotency key identifies uniquely the request and multiple requests with the same key and handle will yield the same result. In case of networking errors the same request with same key can safely be retried."
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Amount in the smallest unit for the account currency. Either `amount` or `order_lines` must be provided if charge/invoice does not already exists.",
          "minimum" : 1
        },
        "currency" : {
          "type" : "string",
          "example" : "USD",
          "description" : "Optional currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. If not provided the account default currency will be used. The currency of an existing charge or invoice cannot be changed."
        },
        "customer" : {
          "description" : "Optional create customer object. An alternative to using a reference to an already created customer. If this object is provided and the customer already exists, the customer will be updated with the information provided in this object. Notice that customer cannot be changed for existing charge/invoice so if handle is given it must match the customer handle for existing customer.",
          "$ref" : "#/definitions/CreateCustomer"
        },
        "source" : {
          "type" : "string",
          "example" : "ct_f96004cae4308473c92bea0638b5b688",
          "description" : "The source for the payment. Either an existing payment method for the customer, e.g. `ca_...` or a card token `ct_...` generated with [Reepay Token](https://docs.reepay.com/token/) or [Reepay JS Library](https://docs.reepay.com/js/)."
        },
        "settle" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether or not to immediately settle the charge. Default is true. If not settled immediately the charge will be authorized and can later be settled. Normally this have to be done within 7 days."
        },
        "recurring" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If set and the source is a token for a payment method that supports recurring charging (e.g. credit card), a recurring payment method is stored for the customer and a reference returned."
        },
        "ordertext" : {
          "type" : "string",
          "example" : "Super product",
          "description" : "Optional order text. Used in conjunction with `amount`. Ignored if `order_lines` is provided."
        },
        "order_lines" : {
          "type" : "array",
          "description" : "Order lines for the charge. The order lines controls the amount. Only required if charge/invoice does not already exist. If given for existing charge the order lines and amount are adjusted.",
          "items" : {
            "$ref" : "#/definitions/CreateOrderLine"
          }
        },
        "customer_handle" : {
          "type" : "string",
          "example" : "cust-0022",
          "description" : "Customer reference. If charge does not already exist either this reference must be provided or a create customer object must be provided. ."
        },
        "billing_address" : {
          "description" : "Optional billing address",
          "$ref" : "#/definitions/InvoiceBillingAddress"
        },
        "shipping_address" : {
          "description" : "Optional shipping address",
          "$ref" : "#/definitions/InvoiceShippingAddress"
        }
      }
    },
    "CreateCustomer" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "carl@leone.com",
          "description" : "Customer email"
        },
        "address" : {
          "type" : "string",
          "example" : "Grove Street 12",
          "description" : "Customer address"
        },
        "address2" : {
          "type" : "string",
          "example" : "Ganton",
          "description" : "Customer address2"
        },
        "city" : {
          "type" : "string",
          "example" : "Los Santos",
          "description" : "Customer city"
        },
        "country" : {
          "type" : "string",
          "example" : "US",
          "description" : "Customer country in ISO 3166-1 alpha-2"
        },
        "phone" : {
          "type" : "string",
          "example" : "555-gotcars",
          "description" : "Customer phone number"
        },
        "company" : {
          "type" : "string",
          "example" : "Leones Cars",
          "description" : "Customer company"
        },
        "vat" : {
          "type" : "string",
          "example" : "US123456789",
          "description" : "Customer vat number"
        },
        "handle" : {
          "type" : "string",
          "example" : "customer006",
          "description" : "Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle is not defined."
        },
        "test" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Test flag. If given it will be verified that the account state matches the intended create state."
        },
        "first_name" : {
          "type" : "string",
          "example" : "Carl",
          "description" : "Customer first name"
        },
        "last_name" : {
          "type" : "string",
          "example" : "Johnson",
          "description" : "Customer last name"
        },
        "postal_code" : {
          "type" : "string",
          "example" : "4531",
          "description" : "Customer postal code"
        },
        "generate_handle" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Auto generate handle on the form cust-[sequence_number]"
        }
      }
    },
    "CreateOrderLine" : {
      "type" : "object",
      "required" : [ "amount", "ordertext", "quantity" ],
      "properties" : {
        "ordertext" : {
          "type" : "string",
          "example" : "Soda",
          "description" : "Order line text"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Per quantity amount in the smallest unit for the account currency",
          "minimum" : 0
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for order line. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Quantity",
          "minimum" : 1
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the per quantity amount is including VAT. Defaults to true."
        }
      }
    },
    "PrepareChargeDto" : {
      "type" : "object",
      "required" : [ "handle" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "order-0000213",
          "description" : "Per account unique reference to charge/invoice. E.g. order id from own system. Multiple payments can be attempted for the same handle but only one authorized or settled charge can exist per handle. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. It is recommended to use a maximum of 20 characters as this will allow for the use of handle as reference on bank statements without truncation."
        },
        "key" : {
          "type" : "string",
          "example" : "5ee00b2b-effb-453e-a246-c3cc26acaeb9",
          "description" : "Optional idempotency key. Only one authorization or settle can be performed for the same handle. If two create attempts are attempted and the first succeeds the second will fail because charge is already settled or authorized. An idempotency key identifies uniquely the request and multiple requests with the same key and handle will yield the same result. In case of networking errors the same request with same key can safely be retried."
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Amount in the smallest unit for the account currency. Either `amount` or `order_lines` must be provided if charge/invoice does not already exists.",
          "minimum" : 1
        },
        "currency" : {
          "type" : "string",
          "example" : "USD",
          "description" : "Optional currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. If not provided the account default currency will be used. The currency of an existing charge or invoice cannot be changed."
        },
        "customer" : {
          "description" : "Optional create customer object. An alternative to using a reference to an already created customer. If this object is provided and the customer already exists, the customer will be updated with the information provided in this object. Notice that customer cannot be changed for existing charge/invoice so if handle is given it must match the customer handle for existing customer.",
          "$ref" : "#/definitions/CreateCustomer"
        },
        "ordertext" : {
          "type" : "string",
          "example" : "Super product",
          "description" : "Optional order text. Used in conjunction with `amount`. Ignored if `order_lines` is provided."
        },
        "order_lines" : {
          "type" : "array",
          "description" : "Order lines for the charge. The order lines controls the amount. Only required if charge/invoice does not already exist. If given for existing charge the order lines and amount are adjusted.",
          "items" : {
            "$ref" : "#/definitions/CreateOrderLine"
          }
        },
        "customer_handle" : {
          "type" : "string",
          "example" : "cust-0022",
          "description" : "Customer reference. If charge does not already exist either this reference must be provided or a create customer object must be provided. ."
        },
        "billing_address" : {
          "description" : "Optional billing address",
          "$ref" : "#/definitions/InvoiceBillingAddress"
        },
        "shipping_address" : {
          "description" : "Optional shipping address",
          "$ref" : "#/definitions/InvoiceShippingAddress"
        }
      }
    },
    "SettleCharge" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "description" : "Optional idempotency key. Only one settle can be performed for the same handle. If two settle attempts are attempted and the first succeeds the second will fail because charge is already settled or authorized. An idempotency key identifies uniquely the request and multiple requests with the same key will yield the same result. In case of networking errors the same request with same key can safely be retried."
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Optional amount different from authorized amount to settle. Must be less than or equal to the authorized amount. Either `amount` or `order_lines` can be provided.",
          "minimum" : 0
        },
        "ordertext" : {
          "type" : "string",
          "description" : "Optional alternative order text to use in conjunction with `amount`. Ignored if `order_lines` is provided. If new `amount` is provided but no new `ordertext` the original order text will be used."
        },
        "order_lines" : {
          "type" : "array",
          "description" : "Optional new order lines to replace old order lines for the charge. The order lines controls the amount. The new amount must be less than or equal to the authorized amount.",
          "items" : {
            "$ref" : "#/definitions/CreateOrderLine"
          }
        }
      }
    },
    "Coupon" : {
      "type" : "object",
      "required" : [ "code", "created", "discount", "handle", "name", "redemptions", "state", "type" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "coupon001",
          "description" : "Per account unique handle for the coupon"
        },
        "code" : {
          "type" : "string",
          "example" : "fall2016",
          "description" : "The coupon code. Maximum 100 characters."
        },
        "discount" : {
          "type" : "string",
          "example" : "discount001",
          "description" : "Discount to use for coupon"
        },
        "name" : {
          "type" : "string",
          "example" : "Join now offer",
          "description" : "Internal name for the coupon."
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "Coupon state `active`, `expired`, `deleted` or `generating`",
          "enum" : [ "active", "deleted", "expired", "generating" ]
        },
        "type" : {
          "type" : "string",
          "example" : "single",
          "description" : "Coupon type either `single` or `set`",
          "enum" : [ "single", "set" ]
        },
        "redemptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 99,
          "description" : "Number of times the coupon has been redeemed"
        },
        "expired" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-07-04T12:40:56.656+0000",
          "description" : "Date and time for expire if state expired. In ISO-8601 extended offset date-time format."
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-07-04T12:40:56.656+0000",
          "description" : "Date when the coupon was created. In ISO-8601 extended offset date-time format."
        },
        "all_plans" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether all plans are eligible for this coupon. Defaults to false."
        },
        "eligible_plans" : {
          "type" : "array",
          "description" : "If not all_plans are set to true, then the set of eligible plan handles must be defined.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "max_redemptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Optional maximum number of times this coupon can be redeemed.",
          "minimum" : 0
        },
        "valid_until" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-14T00:00:00",
          "description" : "Optional date and time until which the coupon is redeemable. In ISO-8601 extended offset date-time format."
        },
        "expire_reason" : {
          "type" : "string",
          "example" : "valid_until",
          "description" : "The expire reason if expired. One of `early`, `valid_until` or `max`. Respectively on demand early expire, valid until has passed or max redemptions has been reached.",
          "enum" : [ "early", "valid_until", "max" ]
        }
      }
    },
    "CouponSearch" : {
      "type" : "object",
      "required" : [ "content", "count", "page", "size", "total_elements", "total_pages" ],
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Number of current page in paginated list",
          "minimum" : 1
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Page size in paginated list",
          "minimum" : 1
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Number of elements in current page",
          "minimum" : 0
        },
        "search" : {
          "type" : "string",
          "example" : "state:active,handle;myhandle",
          "description" : "Optional search expression used"
        },
        "sort" : {
          "type" : "string",
          "example" : "-created",
          "description" : "Optional sort expression used"
        },
        "content" : {
          "type" : "array",
          "description" : "List of coupon for current page",
          "items" : {
            "$ref" : "#/definitions/Coupon"
          }
        },
        "total_elements" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 500,
          "description" : "Total number of elements in paginated list",
          "minimum" : 0
        },
        "total_pages" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "Total number of pages in paginated list",
          "minimum" : 0
        }
      },
      "description" : "A page in a paginated coupon search"
    },
    "CreateCoupon" : {
      "type" : "object",
      "required" : [ "code", "discount", "handle", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Join now offer",
          "description" : "Internal name for the coupon."
        },
        "handle" : {
          "type" : "string",
          "example" : "coupon001",
          "description" : "Per account unique handle for the coupon"
        },
        "code" : {
          "type" : "string",
          "example" : "fall2016",
          "description" : "The coupon code. Maximum 100 characters."
        },
        "discount" : {
          "type" : "string",
          "example" : "discount001",
          "description" : "Discount to use for coupon"
        },
        "all_plans" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether all plans are eligible for this coupon. Defaults to false."
        },
        "eligible_plans" : {
          "type" : "array",
          "description" : "If not all_plans are set to true, then the set of eligible plan handles must be defined.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "max_redemptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Optional maximum number of times this coupon can be redeemed.",
          "minimum" : 1
        },
        "valid_until" : {
          "type" : "string",
          "example" : "2015-05-14T00:00:00",
          "description" : "Optional date and time until which the coupon is redeemable. Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`."
        }
      }
    },
    "UpdateCoupon" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Join now offer",
          "description" : "Internal name for the coupon."
        },
        "all_plans" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether all plans are eligible for this coupon. Defaults to false."
        },
        "eligible_plans" : {
          "type" : "array",
          "description" : "If not all_plans are set to true, then the set of eligible plan handles must be defined.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "max_redemptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Optional maximum number of times this coupon can be redeemed.",
          "minimum" : 1
        },
        "valid_until" : {
          "type" : "string",
          "example" : "2015-05-14T00:00:00",
          "description" : "Optional date and time until which the coupon is redeemable. Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`."
        }
      }
    },
    "Credit" : {
      "type" : "object",
      "required" : [ "amount", "created", "handle", "pending_amount", "state", "subscription", "text" ],
      "properties" : {
        "subscription" : {
          "type" : "string",
          "example" : "sub000219",
          "description" : "Subscription by handle to add the credit to"
        },
        "handle" : {
          "type" : "string",
          "example" : "credit02",
          "description" : "Per account unique handle for the credit. Max length 255 with allowable characters [a-zA-Z0-9_.-@]."
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Credit amount in the smallest unit for the account currency",
          "minimum" : 0
        },
        "text" : {
          "type" : "string",
          "example" : "Credit for lower bandwidth",
          "description" : "Text describing the credit. Will be on affected invoices."
        },
        "state" : {
          "type" : "string",
          "example" : "transferred",
          "description" : "State of the credit, one of the following: `pending`, `transferred`, `cancelled`. Pending credits have not yet been transferred fully to invoices. Cancelled credits have been manually cancelled.",
          "enum" : [ "pending", "transferred", "cancelled" ]
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+0000",
          "description" : "Date when the credit was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "valid_from" : {
          "type" : "string",
          "example" : "2015-07-01",
          "description" : "Date on the form yyyy-MM-dd from which the credit is valid. The credit will not be deducted from invoices before this date."
        },
        "credit_invoices" : {
          "type" : "array",
          "description" : "List of invoices where the credit is applied",
          "items" : {
            "$ref" : "#/definitions/CreditInvoice"
          }
        },
        "pending_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Remaining amount not transferred to invoices",
          "minimum" : 0
        },
        "invoice_credit_note" : {
          "description" : "Invoice credit note if this credit was the result of crediting an invoice",
          "$ref" : "#/definitions/InvoiceCreditNote"
        }
      }
    },
    "CreditInvoice" : {
      "type" : "object",
      "required" : [ "amount", "created", "credit" ],
      "properties" : {
        "credit" : {
          "type" : "string",
          "example" : "credit002",
          "description" : "Credit handle"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "The credit amount transferred to invoice",
          "minimum" : 0
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when credit was transferred to invoice. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        }
      },
      "description" : "The connection between a credit and an invoice"
    },
    "CreditNoteLine" : {
      "type" : "object",
      "required" : [ "amount", "quantity", "text" ],
      "properties" : {
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 15000,
          "description" : "Credit note line total amount",
          "minimum" : 1
        },
        "text" : {
          "type" : "string",
          "example" : "Refund product X",
          "description" : "Credit note line text"
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Credit note line quantity",
          "minimum" : 1
        },
        "order_line_id" : {
          "type" : "string",
          "example" : "7f014d7f5d9e4ee89f1741a8cfe214d7",
          "description" : "Reference to invoice orderline this credit note line relates to"
        }
      }
    },
    "InvoiceCreditNote" : {
      "type" : "object",
      "required" : [ "amount", "created", "credit_note_lines", "id", "invoice" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "c33fbb06a00e4dc0b9055f6fb509c0ed",
          "description" : "Credit note id"
        },
        "invoice" : {
          "type" : "string",
          "example" : "inv-2021",
          "description" : "Invoice credited by this note"
        },
        "transaction" : {
          "type" : "string",
          "example" : "082ebeb1b5864e019b6bf13cad7c535b",
          "description" : "Refund transaction id if credit note has an associated refund"
        },
        "credit" : {
          "type" : "string",
          "example" : "credit-234",
          "description" : "Credit reference if the credit note relates to a subscription credit"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 15000,
          "description" : "Credit note amount"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Creation date for note, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "credit_note_lines" : {
          "type" : "array",
          "description" : "Credit note lines",
          "items" : {
            "$ref" : "#/definitions/CreditNoteLine"
          }
        }
      }
    },
    "CreateCredit" : {
      "type" : "object",
      "required" : [ "amount", "handle", "subscription", "text" ],
      "properties" : {
        "subscription" : {
          "type" : "string",
          "example" : "sub000219",
          "description" : "Subscription by handle to add the credit to"
        },
        "handle" : {
          "type" : "string",
          "example" : "credit02",
          "description" : "Per account unique handle for the credit. Max length 255 with allowable characters [a-zA-Z0-9_.-@]."
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Credit amount in the smallest unit for the account currency",
          "minimum" : 0
        },
        "text" : {
          "type" : "string",
          "example" : "Credit for lower bandwidth",
          "description" : "Text describing the credit. Will be on affected invoices."
        },
        "valid_from" : {
          "type" : "string",
          "example" : "2015-07-01",
          "description" : "Date on the form yyyy-MM-dd from which the credit is valid. The credit will not be deducted from invoices before this date."
        }
      }
    },
    "Card" : {
      "type" : "object",
      "required" : [ "card_type", "created", "customer", "gw_ref", "id", "state" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "ca_fcfac2016614418f969fa5697383e47c",
          "description" : "Unique id for payment method"
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "State of the payment method: `active`, `inactivated` or `failed`",
          "enum" : [ "active", "inactivated", "failed" ]
        },
        "customer" : {
          "type" : "string",
          "example" : "customer00069",
          "description" : "Customer by handle"
        },
        "failed" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the payment method failed. In ISO-8601 extended offset date-time format."
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the payment method was created. In ISO-8601 extended offset date-time format."
        },
        "fingerprint" : {
          "type" : "string",
          "example" : "cst_64e8a26cc0e85bc3f5ce7c5b366b4096",
          "description" : "Uniquely identifies this particular card number"
        },
        "reactivated" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-14T00:00:00.000+00:00",
          "description" : "Date and time of reactivation if the card has been reactivated from failed state. In ISO-8601 extended offset date-time format."
        },
        "gw_ref" : {
          "type" : "string",
          "example" : "657e86162633415a9e6b715248c84da4",
          "description" : "Card gateway reference id"
        },
        "card_type" : {
          "type" : "string",
          "example" : "visa",
          "description" : "Card type: `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover` or `jcb`",
          "enum" : [ "unknown", "visa", "mc", "dankort", "visa_dk", "visa_elec", "maestro", "laser", "amex", "diners", "discover", "jcb" ]
        },
        "exp_date" : {
          "type" : "string",
          "example" : "09-18",
          "description" : "Card expire date on form MM-YY "
        },
        "masked_card" : {
          "type" : "string",
          "example" : "457111XXXXXX3777",
          "description" : "Masked card number"
        },
        "last_success" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-14T00:00:00.000+00:00",
          "description" : "Date and time of last succesfull use of the card. In ISO-8601 extended offset date-time format."
        },
        "last_failed" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-14T00:00:00.000+00:00",
          "description" : "Date and time of last failed use of the card. In ISO-8601 extended offset date-time format."
        },
        "first_fail" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-14T00:00:00.000+00:00",
          "description" : "Date and time of first succesfull use of the card. In ISO-8601 extended offset date-time format."
        },
        "error_code" : {
          "type" : "string",
          "example" : "credit_card_expired",
          "description" : "An error code from the last failed use of the card. See [transaction errors](https://docs.reepay.com/api/#transaction-errors)."
        },
        "error_state" : {
          "type" : "string",
          "example" : "hard_declined",
          "description" : "Error state from last failed use of the card: `pending`, `soft_declined`, `hard_declined` or `processing_error`",
          "enum" : [ "pending", "soft_declined", "hard_declined", "processing_error" ]
        },
        "strong_authentication_status" : {
          "type" : "string",
          "example" : "secured_by_nets",
          "description" : "Status for strong customer authentication",
          "enum" : [ "threed_secure", "threed_secure_not_enrolled", "threed_secure_local_only", "secured_by_nets" ]
        }
      }
    },
    "Customer" : {
      "type" : "object",
      "required" : [ "active_subscriptions", "cancelled_amount", "cancelled_invoices", "cancelled_subscriptions", "created", "dunning_amount", "dunning_invoices", "expired_subscriptions", "failed_amount", "failed_invoices", "handle", "non_renewing_subscriptions", "on_hold_subscriptions", "pending_additional_cost_amount", "pending_additional_costs", "pending_amount", "pending_credit_amount", "pending_credits", "pending_invoices", "refunded_amount", "settled_amount", "settled_invoices", "subscriptions", "transferred_additional_cost_amount", "transferred_additional_costs", "transferred_credit_amount", "transferred_credits", "trial_active_subscriptions", "trial_cancelled_subscriptions" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "carl@leone.com",
          "description" : "Customer email"
        },
        "address" : {
          "type" : "string",
          "example" : "Grove Street 12",
          "description" : "Customer address"
        },
        "address2" : {
          "type" : "string",
          "example" : "Ganton",
          "description" : "Customer address2"
        },
        "city" : {
          "type" : "string",
          "example" : "Los Santos",
          "description" : "Customer city"
        },
        "country" : {
          "type" : "string",
          "example" : "US",
          "description" : "Customer country in ISO 3166-1 alpha-2"
        },
        "phone" : {
          "type" : "string",
          "example" : "555-gotcars",
          "description" : "Customer phone number"
        },
        "company" : {
          "type" : "string",
          "example" : "Leones Cars",
          "description" : "Customer company"
        },
        "vat" : {
          "type" : "string",
          "example" : "US123456789",
          "description" : "Customer vat number"
        },
        "handle" : {
          "type" : "string",
          "example" : "customer006",
          "description" : "Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@]."
        },
        "test" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Test flag"
        },
        "subscriptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of active subscriptions for this customer (deprecated, will be removed in a later version, use active_subscriptions)"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the customer was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "deleted" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the customer was deleted. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "first_name" : {
          "type" : "string",
          "example" : "Carl",
          "description" : "Customer first name"
        },
        "last_name" : {
          "type" : "string",
          "example" : "Johnson",
          "description" : "Customer last name"
        },
        "postal_code" : {
          "type" : "string",
          "example" : "4531",
          "description" : "Customer postal code"
        },
        "active_subscriptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of active subscriptions for this customer"
        },
        "trial_active_subscriptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of active subscriptions in trial for this customer"
        },
        "trial_cancelled_subscriptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of cancelled subscriptions in trial for this customer"
        },
        "expired_subscriptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of expired subscription for this customer"
        },
        "on_hold_subscriptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of subscription on hold for this customer"
        },
        "cancelled_subscriptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of cancelled subscription for this customer"
        },
        "non_renewing_subscriptions" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of non renewing (active subscriptions not renewing at billing period end) subscriptions for this customer"
        },
        "failed_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of failed subscription invoices for this customer"
        },
        "failed_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for failed subscription invoices"
        },
        "cancelled_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of cancelled subscription invoices for this customer"
        },
        "cancelled_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for cancelled subscription invoices"
        },
        "pending_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of pending subscription invoices for this customer"
        },
        "pending_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for pending subscription invoices"
        },
        "dunning_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of dunning subscription invoices for this customer"
        },
        "dunning_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for dunning subscription invoices"
        },
        "settled_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of settled subscription invoices for this customer"
        },
        "settled_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed settled subscription amount"
        },
        "refunded_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed refunded subscription amount"
        },
        "pending_additional_costs" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of pending additional costs"
        },
        "pending_additional_cost_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount of pending additional costs incl vat"
        },
        "transferred_additional_costs" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of additional costs that have been applied to invoices"
        },
        "transferred_additional_cost_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount of additional costs that have been applied to invoices"
        },
        "pending_credits" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of credits that have not fully been applied to invoices"
        },
        "pending_credit_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed credit amount not yet applied to invoices"
        },
        "transferred_credits" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of credits that have fully been applied to invoices"
        },
        "transferred_credit_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed credit amount that have been applied to invoices"
        }
      }
    },
    "CustomerSearch" : {
      "type" : "object",
      "required" : [ "content", "count", "page", "size", "total_elements", "total_pages" ],
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Number of current page in paginated list",
          "minimum" : 1
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Page size in paginated list",
          "minimum" : 1
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Number of elements in current page",
          "minimum" : 0
        },
        "search" : {
          "type" : "string",
          "example" : "state:active,handle;myhandle",
          "description" : "Optional search expression used"
        },
        "sort" : {
          "type" : "string",
          "example" : "-created",
          "description" : "Optional sort expression used"
        },
        "content" : {
          "type" : "array",
          "description" : "List of customers for current page",
          "items" : {
            "$ref" : "#/definitions/Customer"
          }
        },
        "total_elements" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 500,
          "description" : "Total number of elements in paginated list",
          "minimum" : 0
        },
        "total_pages" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "Total number of pages in paginated list",
          "minimum" : 0
        }
      },
      "description" : "A page in a paginated customer search"
    },
    "UpdateCustomer" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "carl@leone.com",
          "description" : "Customer email"
        },
        "address" : {
          "type" : "string",
          "example" : "Grove Street 12",
          "description" : "Customer address"
        },
        "address2" : {
          "type" : "string",
          "example" : "Ganton",
          "description" : "Customer address2"
        },
        "city" : {
          "type" : "string",
          "example" : "Los Santos",
          "description" : "Customer city"
        },
        "country" : {
          "type" : "string",
          "example" : "US",
          "description" : "Customer country in ISO 3166-1 alpha-2"
        },
        "phone" : {
          "type" : "string",
          "example" : "555-gotcars",
          "description" : "Customer phone number"
        },
        "company" : {
          "type" : "string",
          "example" : "Leones Cars",
          "description" : "Customer company"
        },
        "vat" : {
          "type" : "string",
          "example" : "US123456789",
          "description" : "Customer vat number"
        },
        "first_name" : {
          "type" : "string",
          "example" : "Carl",
          "description" : "Customer first name"
        },
        "last_name" : {
          "type" : "string",
          "example" : "Johnson",
          "description" : "Customer last name"
        },
        "postal_code" : {
          "type" : "string",
          "example" : "4531",
          "description" : "Customer postal code"
        }
      }
    },
    "CustomerNote" : {
      "type" : "object",
      "required" : [ "created", "id", "note" ],
      "properties" : {
        "note" : {
          "type" : "string",
          "example" : "Next month free",
          "description" : "Customer note text. Maximum 4096 characters."
        },
        "id" : {
          "type" : "string",
          "example" : "fcfac2016614418f969fa5697383e47c",
          "description" : "Unique id for note assigned by Reepay"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+0000",
          "description" : "Date when the customer note was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "user_name" : {
          "type" : "string",
          "example" : "baldur",
          "description" : "User name of the note creator"
        },
        "user_email" : {
          "type" : "string",
          "example" : "test@example.com",
          "description" : "User email of the note creator"
        }
      }
    },
    "CreateCustomerNote" : {
      "type" : "object",
      "required" : [ "note" ],
      "properties" : {
        "note" : {
          "type" : "string",
          "example" : "Next month free",
          "description" : "Customer note text. Maximum 4096 characters."
        },
        "user_name" : {
          "type" : "string",
          "example" : "baldur",
          "description" : "User name of the note creator"
        },
        "user_email" : {
          "type" : "string",
          "example" : "test@example.com",
          "description" : "User email of the note creator"
        }
      }
    },
    "PaymentMethods" : {
      "type" : "object",
      "properties" : {
        "cards" : {
          "type" : "array",
          "description" : "List of cards",
          "items" : {
            "$ref" : "#/definitions/Card"
          }
        }
      }
    },
    "CardToken" : {
      "type" : "object",
      "required" : [ "card_token" ],
      "properties" : {
        "card_token" : {
          "type" : "string",
          "example" : "ct_7f683c7bcca44d6585e4434dc6a25d57",
          "description" : "Add card to customer by card token (`ct_...`). A card token can be generated with [Reepay Token](https://docs.reepay.com/token/) or [Reepay JS Library](https://docs.reepay.com/js/)."
        }
      }
    },
    "CardImport" : {
      "type" : "object",
      "required" : [ "card_identifier" ],
      "properties" : {
        "agreement" : {
          "type" : "string",
          "example" : "dadfd23720bc467597a2a3ba44daa9fa",
          "description" : "Optional agreement id to identify agreement with card payment gateway. Required if multiple agreements exists for account."
        },
        "card_identifier" : {
          "type" : "string",
          "example" : "21313133",
          "description" : "Card payment gateway card identifier"
        }
      }
    },
    "CardTransaction" : {
      "type" : "object",
      "required" : [ "card", "card_type" ],
      "properties" : {
        "card" : {
          "description" : "Card used for transaction",
          "$ref" : "#/definitions/Card"
        },
        "error" : {
          "type" : "string",
          "example" : "credit_card_expired",
          "description" : "Error code if failed. See [transaction errors](https://docs.reepay.com/api/#transaction-errors)."
        },
        "fingerprint" : {
          "type" : "string",
          "example" : "cst_64e8a26cc0e85bc3f5ce7c5b366b4096",
          "description" : "Uniquely identifies this particular card number"
        },
        "ref_transaction" : {
          "type" : "string",
          "example" : "a7a7195c54f644369922d0dfe794dd0c",
          "description" : "Id of a possible referenced transaction"
        },
        "gw_id" : {
          "type" : "string",
          "example" : "28fc559a229e4fd3a134297a478a0075",
          "description" : "Gateway id for card"
        },
        "last_failed" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the card transaction last failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "first_failed" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the card transaction first failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "error_state" : {
          "type" : "string",
          "example" : "hard_declined",
          "description" : "Error state if failed: `pending`, `soft_declined`, `hard_declined` or `processing_error`",
          "enum" : [ "pending", "soft_declined", "hard_declined", "processing_error" ]
        },
        "card_type" : {
          "type" : "string",
          "example" : "visa",
          "description" : "Card type: `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover` or `jcb`",
          "enum" : [ "unknown", "visa", "mc", "dankort", "visa_dk", "visa_elec", "maestro", "laser", "amex", "diners", "discover", "jcb" ]
        },
        "exp_date" : {
          "type" : "string",
          "example" : "09-18",
          "description" : "Card expire date on form MM-YY "
        },
        "masked_card" : {
          "type" : "string",
          "example" : "457111XXXXXX3777",
          "description" : "Masked card number"
        },
        "strong_authentication_status" : {
          "type" : "string",
          "example" : "secured_by_nets",
          "description" : "Status for strong customer authentication",
          "enum" : [ "threed_secure", "threed_secure_not_enrolled", "threed_secure_local_only", "secured_by_nets" ]
        }
      }
    },
    "Invoice" : {
      "type" : "object",
      "required" : [ "additional_costs", "amount", "amount_ex_vat", "amount_vat", "created", "credits", "currency", "customer", "discount_amount", "due", "handle", "id", "number", "order_lines", "org_amount", "refunded_amount", "settled_amount", "state", "transactions", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Invoice id assigned by Reepay"
        },
        "handle" : {
          "type" : "string",
          "example" : "inv-311",
          "description" : "Per account unique handle. Provided at on-demand invoice/charge creation or set to `inv-<invoice_number>` for automatically created subscription invoices"
        },
        "customer" : {
          "type" : "string",
          "example" : "customer006",
          "description" : "Customer handle"
        },
        "subscription" : {
          "type" : "string",
          "example" : "sub010",
          "description" : "Subscription handle, will be null for a one-time customer invoice"
        },
        "plan" : {
          "type" : "string",
          "example" : "a7a7195c54f644369922d0dfe794dd0c",
          "description" : "Subscription plan handle for the plan used to automatically create the invoice or the case that an on-demand subscription invoice has been created that should include a plan order line"
        },
        "state" : {
          "type" : "string",
          "example" : "pending",
          "description" : "The invoice state one of the following: `pending`, `dunning`, `settled`, `cancelled`, `authorized`, `failed`",
          "enum" : [ "pending", "dunning", "settled", "authorized", "cancelled", "failed" ]
        },
        "type" : {
          "type" : "string",
          "example" : "pending",
          "description" : "The type of invoice: `s` - subscription recurring, `so` - subscription one-time, `soi` - subscription one-time instant, `co` - customer one-time, `ch` - charge",
          "enum" : [ "s", "so", "soi", "co", "ch" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "The invoice amount including VAT",
          "minimum" : 0
        },
        "number" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1002,
          "description" : "Sequential invoice number",
          "minimum" : 1
        },
        "currency" : {
          "type" : "string",
          "example" : "DKK",
          "description" : "Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code"
        },
        "due" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When is the invoice due, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "failed" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the invoice failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "settled" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the invoice settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "cancelled" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the invoice was cancelled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "authorized" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the invoice was authorized, if the invoice went through an authorize and settle flow, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "credits" : {
          "type" : "array",
          "description" : "Credits applied to invoice",
          "items" : {
            "$ref" : "#/definitions/CreditInvoice"
          }
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the invoice was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "plan_version" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Subscription plan version"
        },
        "dunning_plan" : {
          "type" : "string",
          "example" : "dunning_plan_02",
          "description" : "Dunning plan handle"
        },
        "discount_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "The potential discount amount deducted from the invoice amount including VAT",
          "minimum" : 0
        },
        "org_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "The invoice original amount including VAT, may differ from amount if adjustments have been applied for the invoice",
          "minimum" : 0
        },
        "amount_vat" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2000,
          "description" : "The invoice vat amount calculated as rounded summed fractional vats for each orderline"
        },
        "amount_ex_vat" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 8000,
          "description" : "The invoice amount without vat"
        },
        "settled_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50000,
          "description" : "Settled amount"
        },
        "refunded_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50000,
          "description" : "Refunded amount"
        },
        "authorized_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50000,
          "description" : "Authorized amount"
        },
        "credited_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50000,
          "description" : "Credited amount"
        },
        "period_number" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "The subscription period this invoice is for"
        },
        "order_lines" : {
          "type" : "array",
          "description" : "Order lines for invoice sorted by descending timestamp",
          "items" : {
            "$ref" : "#/definitions/OrderLine"
          }
        },
        "additional_costs" : {
          "type" : "array",
          "description" : "Additional costs for invoice",
          "items" : {
            "type" : "string"
          }
        },
        "transactions" : {
          "type" : "array",
          "description" : "Invoice transactions",
          "items" : {
            "$ref" : "#/definitions/Transaction"
          }
        },
        "credit_notes" : {
          "type" : "array",
          "description" : "Invoice credit notes",
          "items" : {
            "$ref" : "#/definitions/InvoiceCreditNote"
          }
        },
        "dunning_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When dunning for the invoice was started, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "dunning_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Number of dunning events for invoice (number of reminders sent)"
        },
        "dunning_expired" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When dunning for the invoice expired, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "period_from" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "The start of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "period_to" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-04T12:40:56.656+00:00",
          "description" : "The end of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "settle_later" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this is a customer one-time invoice that will be settled later"
        },
        "settle_later_payment_method" : {
          "type" : "string",
          "example" : "ca_608698b783382bccc4e23b3a024631f0",
          "description" : "The payment method to use for a later settle of a one-time customer invoice"
        },
        "billing_address" : {
          "description" : "Optional billing address",
          "$ref" : "#/definitions/InvoiceBillingAddress"
        },
        "shipping_address" : {
          "description" : "Optional shipping address",
          "$ref" : "#/definitions/InvoiceShippingAddress"
        }
      }
    },
    "ManualTransaction" : {
      "type" : "object",
      "required" : [ "method", "payment_date" ],
      "properties" : {
        "method" : {
          "type" : "string",
          "example" : "cash",
          "description" : "The method used for the offline manual transaction, allowable values: `cash`, `bank_transfer`, `check`, `chargeback`, `other`",
          "enum" : [ "cash", "bank_transfer", "check", "chargeback", "other" ]
        },
        "comment" : {
          "type" : "string",
          "example" : "Paid by cash in the shop",
          "description" : "Optional comment for manual transaction"
        },
        "reference" : {
          "type" : "string",
          "example" : "231",
          "description" : "Optional reference for the manual transaction"
        },
        "payment_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-07-10",
          "description" : "When the manual transaction was performed on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`"
        }
      }
    },
    "PgwTransaction" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "mobilepay",
          "description" : "Transaction type: `mobilepay` or `viabill`",
          "enum" : [ "mobilepay", "viabill" ]
        },
        "ref_transaction" : {
          "type" : "string",
          "example" : "a7a7195c54f644369922d0dfe794dd0c",
          "description" : "Id of a possible referenced transaction"
        },
        "pgw_id" : {
          "type" : "string",
          "example" : "28fc559a229e4fd3a134297a478a0075",
          "description" : "Payment Gateway id"
        }
      }
    },
    "Transaction" : {
      "type" : "object",
      "required" : [ "amount", "created", "id", "invoice", "state", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Transaction id assigned by Reepay"
        },
        "state" : {
          "type" : "string",
          "example" : "settled",
          "description" : "State of the transaction, one of the following: `pending`, `processing`, `authorized`, `settled`, `refunded`, `failed`, `cancelled`",
          "enum" : [ "pending", "processing", "authorized", "settled", "refunded", "failed", "cancelled" ]
        },
        "invoice" : {
          "type" : "string",
          "example" : "a7a7195c54f644369922d0dfe794dd0c",
          "description" : "Invoice id"
        },
        "type" : {
          "type" : "string",
          "example" : "settle",
          "description" : "Transaction type, one of the following: 'settle', 'refund', `authorization`",
          "enum" : [ "settle", "refund", "authorization" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "The transaction amount",
          "minimum" : 0
        },
        "settled" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the transaction was settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "authorized" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "When the transaction was authorized, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "failed" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the transaction failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "refunded" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the transaction was refunded, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the transaction was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "card_transaction" : {
          "description" : "Specifics in case of card transaction",
          "$ref" : "#/definitions/CardTransaction"
        },
        "manual_transaction" : {
          "description" : "Specifics in case of manual transaction",
          "$ref" : "#/definitions/ManualTransaction"
        },
        "pgw_transaction" : {
          "description" : "Specifics in case of generic payment gateway transaction",
          "$ref" : "#/definitions/PgwTransaction"
        }
      }
    },
    "CreateCustomerInvoice" : {
      "type" : "object",
      "required" : [ "handle", "order_lines" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "invoice-006",
          "description" : "Per account unique handle for the invoice. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. It is recommended to use a maximum of 20 characters as this will allow for the use of handle as reference on bank statements without truncation."
        },
        "settle" : {
          "description" : "Optional settle to perform after creation",
          "$ref" : "#/definitions/Settle"
        },
        "order_lines" : {
          "type" : "array",
          "description" : "Order lines for the invoice",
          "items" : {
            "$ref" : "#/definitions/CreateOrderLine"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "manual_transfer" : {
          "description" : "Optional manual transfer to settle invoice with after creation.",
          "$ref" : "#/definitions/ManualSettleTransfer"
        },
        "billing_address" : {
          "description" : "Optional billing address",
          "$ref" : "#/definitions/InvoiceBillingAddress"
        },
        "shipping_address" : {
          "description" : "Optional shipping address",
          "$ref" : "#/definitions/InvoiceShippingAddress"
        }
      }
    },
    "ManualSettleTransfer" : {
      "type" : "object",
      "required" : [ "method", "payment_date" ],
      "properties" : {
        "comment" : {
          "type" : "string",
          "example" : "Paid by cash in the shop",
          "description" : "Optional comment for manual transaction"
        },
        "reference" : {
          "type" : "string",
          "example" : "231",
          "description" : "Optional reference for the manual transaction"
        },
        "method" : {
          "type" : "string",
          "example" : "cash",
          "description" : "The payment method used for the offline manual transaction, allowable values: `cash`, `bank_transfer`, `check`, `other`",
          "enum" : [ "cash", "bank_transfer", "check", "other" ]
        },
        "payment_date" : {
          "type" : "string",
          "example" : "2016-07-10",
          "description" : "When the manual transaction was performed on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`"
        }
      }
    },
    "Settle" : {
      "type" : "object",
      "properties" : {
        "due" : {
          "type" : "string",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Optional due date and time on the form yyyy-MM-dd, yyyyMMdd, yyyy-MM-ddTHH:mm and yyyy-MM-ddTHH:mm:ss from which the invoice should be tried settled. Only allowed for one-time customer invoices."
        },
        "payment_method" : {
          "type" : "string",
          "example" : "b4e8021a1280a73724ea7fd1b4e5d259",
          "description" : "Payment method id to use to settle invoice. Must be a payment method supporting instant settle, e.g. credit card. Is required for one-time invoices if the amount on the invoice is more than zero."
        }
      }
    },
    "Discount" : {
      "type" : "object",
      "required" : [ "apply_to", "created", "handle", "name", "state" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "discount001",
          "description" : "Per account unique handle for the discount"
        },
        "name" : {
          "type" : "string",
          "example" : "Gold member discount",
          "description" : "Name of discount. Will be used as order line text."
        },
        "description" : {
          "type" : "string",
          "example" : "Discount for members part of the Gold programme",
          "description" : "Optional description of discount"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Fixed amount discount deducted from order line amounts including VAT",
          "minimum" : 0
        },
        "percentage" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 25,
          "description" : "Percentage discount applied to each applicable order line",
          "minimum" : 1,
          "maximum" : 100
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "Discount state `active` or `deleted`.",
          "enum" : [ "active", "deleted" ]
        },
        "deleted" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-08-04T14:41:30.333+0000",
          "description" : "Date when the discount was deleted if deleted. In ISO-8601 extended offset date-time format."
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-07-04T12:40:56.656+0000",
          "description" : "Date when the discount was created. In ISO-8601 extended offset date-time format."
        },
        "apply_to" : {
          "type" : "array",
          "example" : "all",
          "description" : "Which order lines the discount is applicable to: `all`, `setup_fee`, `plan`, `additional_cost`, `add_on` and `ondemand`",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "fixed_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Apply discount to a fixed number of invoices",
          "minimum" : 1
        },
        "fixed_period_unit" : {
          "type" : "string",
          "example" : "months",
          "description" : "Time unit use for fixed valid period either `days` or `months`",
          "enum" : [ "months", "days" ]
        },
        "fixed_period" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Fixed period length e.g. 12 months or 14 days",
          "minimum" : 1
        }
      }
    },
    "CreateDiscount" : {
      "type" : "object",
      "required" : [ "apply_to", "handle", "name" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "discount001",
          "description" : "Per account unique handle for the discount"
        },
        "name" : {
          "type" : "string",
          "example" : "Gold member discount",
          "description" : "Name of discount. Will be used as order line text."
        },
        "description" : {
          "type" : "string",
          "example" : "Discount for members part of the Gold programme",
          "description" : "Optional description of discount"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Fixed amount discount deducted from order line amounts including VAT",
          "minimum" : 0
        },
        "percentage" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 25,
          "description" : "Percentage discount applied to each applicable order line",
          "minimum" : 1,
          "maximum" : 100
        },
        "apply_to" : {
          "type" : "array",
          "example" : "all",
          "description" : "Which order lines the discount is applicable to: `all`, `setup_fee`, `plan`, `additional_cost`, `add_on` and `ondemand`",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "fixed_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Apply discount to a fixed number of invoices",
          "minimum" : 1
        },
        "fixed_period_unit" : {
          "type" : "string",
          "example" : "months",
          "description" : "Time unit use for fixed valid period either `days` or `months`",
          "enum" : [ "months", "days" ]
        },
        "fixed_period" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Fixed period length e.g. 12 months or 14 days",
          "minimum" : 1
        }
      }
    },
    "DiscountSearch" : {
      "type" : "object",
      "required" : [ "content", "count", "page", "size", "total_elements", "total_pages" ],
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Number of current page in paginated list",
          "minimum" : 1
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Page size in paginated list",
          "minimum" : 1
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Number of elements in current page",
          "minimum" : 0
        },
        "search" : {
          "type" : "string",
          "example" : "state:active,handle;myhandle",
          "description" : "Optional search expression used"
        },
        "sort" : {
          "type" : "string",
          "example" : "-created",
          "description" : "Optional sort expression used"
        },
        "content" : {
          "type" : "array",
          "description" : "List of discounts for current page",
          "items" : {
            "$ref" : "#/definitions/Discount"
          }
        },
        "total_elements" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 500,
          "description" : "Total number of elements in paginated list",
          "minimum" : 0
        },
        "total_pages" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "Total number of pages in paginated list",
          "minimum" : 0
        }
      },
      "description" : "A page in a paginated discount search"
    },
    "DunningPlan" : {
      "type" : "object",
      "required" : [ "created", "default_plan", "final_subscription_action", "handle", "name", "schedule", "state" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Short interval",
          "description" : "Dunning plan name"
        },
        "schedule" : {
          "type" : "array",
          "description" : "The schedule as list of intervals in days",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "handle" : {
          "type" : "string",
          "example" : "dp0012",
          "description" : "Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@]."
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "State of dunning plan, one of the following: `active`, `deleted`.",
          "enum" : [ "active", "deleted" ]
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the dunning plan was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "default_plan" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If this is default plan"
        },
        "final_subscription_action" : {
          "type" : "string",
          "example" : "expire",
          "description" : "Action to take for subscription if dunning fails, one of the following: `expire`, `on_hold`, `none`",
          "enum" : [ "expire", "on_hold", "none" ]
        }
      }
    },
    "CreateDunningPlan" : {
      "type" : "object",
      "required" : [ "default_plan", "final_subscription_action", "handle", "name", "schedule" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Short interval",
          "description" : "Dunning plan name"
        },
        "schedule" : {
          "type" : "array",
          "description" : "The schedule as list of intervals in days",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "handle" : {
          "type" : "string",
          "example" : "dp0012",
          "description" : "Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@]."
        },
        "default_plan" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If this is default plan"
        },
        "final_subscription_action" : {
          "type" : "string",
          "example" : "expire",
          "description" : "Action to take for subscription if dunning fails, one of the following: `expire`, `on_hold`, `none`",
          "enum" : [ "expire", "on_hold", "none" ]
        }
      }
    },
    "UpdateDunningPlan" : {
      "type" : "object",
      "required" : [ "default_plan", "final_subscription_action", "name", "schedule" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Short interval",
          "description" : "Dunning plan name"
        },
        "schedule" : {
          "type" : "array",
          "description" : "The schedule as list of intervals in days",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "default_plan" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If this is default plan"
        },
        "final_subscription_action" : {
          "type" : "string",
          "example" : "expire",
          "description" : "Action to take for subscription if dunning fails, one of the following: `expire`, `on_hold`, `none`",
          "enum" : [ "expire", "on_hold", "none" ]
        }
      }
    },
    "Event" : {
      "type" : "object",
      "required" : [ "created", "event_type", "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Unique event id assigned by Reepay"
        },
        "customer" : {
          "type" : "string",
          "example" : "customer00069",
          "description" : "Customer handle"
        },
        "subscription" : {
          "type" : "string",
          "example" : "sub003",
          "description" : "Subscription handle"
        },
        "invoice" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Invoice id"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the event happened, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "event_type" : {
          "type" : "string",
          "example" : "invoice_settled",
          "description" : "The event type (see documentation)"
        }
      }
    },
    "EventList" : {
      "type" : "object",
      "required" : [ "content", "count", "page", "size" ],
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Number of current page in paginated list",
          "minimum" : 1
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Page size in paginated list",
          "minimum" : 1
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Number of elements in current page",
          "minimum" : 0
        },
        "content" : {
          "type" : "array",
          "description" : "List of events for current slice",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      },
      "description" : "A page in a sliced event list"
    },
    "InvoiceSearch" : {
      "type" : "object",
      "required" : [ "content", "count", "page", "size", "total_elements", "total_pages" ],
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Number of current page in paginated list",
          "minimum" : 1
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Page size in paginated list",
          "minimum" : 1
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Number of elements in current page",
          "minimum" : 0
        },
        "search" : {
          "type" : "string",
          "example" : "state:active,handle;myhandle",
          "description" : "Optional search expression used"
        },
        "sort" : {
          "type" : "string",
          "example" : "-created",
          "description" : "Optional sort expression used"
        },
        "content" : {
          "type" : "array",
          "description" : "List of invoices for current page",
          "items" : {
            "$ref" : "#/definitions/Invoice"
          }
        },
        "total_elements" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 500,
          "description" : "Total number of elements in paginated list",
          "minimum" : 0
        },
        "total_pages" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "Total number of pages in paginated list",
          "minimum" : 0
        }
      },
      "description" : "A page in a paginated invoice search"
    },
    "TransactionSearch" : {
      "type" : "object",
      "required" : [ "content", "count", "page", "size", "total_elements", "total_pages" ],
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Number of current page in paginated list",
          "minimum" : 1
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Page size in paginated list",
          "minimum" : 1
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Number of elements in current page",
          "minimum" : 0
        },
        "search" : {
          "type" : "string",
          "example" : "state:active,handle;myhandle",
          "description" : "Optional search expression used"
        },
        "sort" : {
          "type" : "string",
          "example" : "-created",
          "description" : "Optional sort expression used"
        },
        "content" : {
          "type" : "array",
          "description" : "List of transactions for current page",
          "items" : {
            "$ref" : "#/definitions/Transaction"
          }
        },
        "total_elements" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 500,
          "description" : "Total number of elements in paginated list",
          "minimum" : 0
        },
        "total_pages" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "Total number of pages in paginated list",
          "minimum" : 0
        }
      },
      "description" : "A page in a paginated transaction search"
    },
    "UpdateOrganisation" : {
      "type" : "object",
      "required" : [ "name", "subdomain" ],
      "properties" : {
        "subdomain" : {
          "type" : "string",
          "example" : "mycompany",
          "description" : "Organisation subdomain handle in Reepay. Must match [a-z0-9-] and maximum length 64."
        },
        "name" : {
          "type" : "string",
          "example" : "My Company",
          "description" : "Organisation name"
        }
      }
    },
    "Refund" : {
      "type" : "object",
      "required" : [ "amount", "created", "currency", "id", "invoice", "state", "transaction", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "aafba2016614418f969fa5697383e47c",
          "description" : "Refund id assigned by Reepay"
        },
        "state" : {
          "type" : "string",
          "example" : "refunded",
          "description" : "The refund state either `refunded` or `failed`",
          "enum" : [ "refunded", "failed" ]
        },
        "invoice" : {
          "type" : "string",
          "example" : "order-0000213",
          "description" : "Invoice/charge handle"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Refunded amount",
          "minimum" : 0
        },
        "currency" : {
          "type" : "string",
          "example" : "DKK",
          "description" : "Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code"
        },
        "transaction" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Transaction id assigned by Reepay"
        },
        "error" : {
          "type" : "string",
          "example" : "credit_card_expired",
          "description" : "Reepay error code if failed. See [transaction errors](https://docs.reepay.com/api/#transaction-errors)."
        },
        "type" : {
          "type" : "string",
          "example" : "card",
          "description" : "Type of refund, either `card`, `mobilepay`, `viabill` or `manual`",
          "enum" : [ "card", "manual", "mobilepay", "viabill" ]
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "When the refund was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "credit_note_id" : {
          "type" : "string",
          "example" : "a9cf80b4aec2d7bc12f85612f7a0f184",
          "description" : "Credit note id for successful refund"
        },
        "ref_transaction" : {
          "type" : "string",
          "example" : "a7a7195c54f644369922d0dfe794dd0c",
          "description" : "Id of a possible settled transaction that has been refunded"
        },
        "error_state" : {
          "type" : "string",
          "example" : "hard_declined",
          "description" : "Reepay error state if failed: `hard_declined` or `processing_error`. A hard decline indicates a refund decline by acquirer. A processing error indicates an error processing the refund either at Reepay, the acquirer, or between Reepay amd the acquirer.",
          "enum" : [ "hard_declined", "processing_error" ]
        }
      }
    },
    "CreateCreditNoteLine" : {
      "type" : "object",
      "required" : [ "amount", "quantity", "text" ],
      "properties" : {
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Per quantity amount in the smallest unit for the account currency",
          "minimum" : 1
        },
        "text" : {
          "type" : "string",
          "example" : "Some compensation",
          "description" : "Credit note line text"
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Quantity",
          "minimum" : 1
        },
        "order_line_id" : {
          "type" : "string",
          "description" : "Optional reference to invoice order line for which this refund line is related"
        }
      }
    },
    "CreateRefund" : {
      "type" : "object",
      "required" : [ "invoice" ],
      "properties" : {
        "invoice" : {
          "type" : "string",
          "example" : "order-0000213",
          "description" : "Handle or id for invoice/charge to refund"
        },
        "key" : {
          "type" : "string",
          "example" : "5ee00b2b-effb-453e-a246-c3cc26acaeb9",
          "description" : "Optional idempotency key. Only one refund can be performed for the same key. An idempotency key identifies uniquely the request and multiple requests with the same key and invoice will yield the same result. In case of networking errors the same request with same key can safely be retried."
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Optional amount in the smallest unit for the account currency. Either `amount` or `note_lines` can be provided, if neither is provided the full refundable amount is refunded.",
          "minimum" : 1
        },
        "text" : {
          "type" : "string",
          "example" : "Super Product",
          "description" : "Optional refund text to use on credit note. Used in conjunction with `amount`. Ignored if `note_lines` is provided."
        },
        "note_lines" : {
          "type" : "array",
          "description" : "Refund credit note lines to give detailed information for credit note. Either this or `amount` must be provided.",
          "items" : {
            "$ref" : "#/definitions/CreateCreditNoteLine"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "manual_transfer" : {
          "description" : "Optional manual transfer. If given no refund will be performed on potential online settled transaction like card transaction.",
          "$ref" : "#/definitions/ManualRefundTransfer"
        }
      }
    },
    "ManualRefundTransfer" : {
      "type" : "object",
      "required" : [ "method", "payment_date" ],
      "properties" : {
        "comment" : {
          "type" : "string",
          "example" : "Paid by cash in the shop",
          "description" : "Optional comment for manual transaction"
        },
        "reference" : {
          "type" : "string",
          "example" : "231",
          "description" : "Optional reference for the manual transaction"
        },
        "method" : {
          "type" : "string",
          "example" : "cash",
          "description" : "The refund method used for the offline manual transaction, allowable values: `cash`, `chargeback`, `bank_transfer`, `check`, `other`",
          "enum" : [ "cash", "chargeback", "bank_transfer", "check", "other" ]
        },
        "payment_date" : {
          "type" : "string",
          "example" : "2016-07-10",
          "description" : "When the manual transaction was performed on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`"
        }
      }
    },
    "Plan" : {
      "type" : "object",
      "required" : [ "amount", "created", "currency", "handle", "interval_length", "name", "schedule_type", "state", "version" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Fitness",
          "description" : "Name of the plan"
        },
        "description" : {
          "type" : "string",
          "example" : "Fitness 149/month subscription",
          "description" : "Description of the plan"
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for this plan. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 25000,
          "description" : "Amount for the plan in the smallest unit for the account currency",
          "minimum" : 0
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional default quantity of the subscription plan product for new subscriptions. Default is 1.",
          "minimum" : 1
        },
        "prepaid" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Subscriptions can either be prepaid where an amount is paid in advance, or the opposite. This setting only relates to handling of pause scenarios."
        },
        "handle" : {
          "type" : "string",
          "example" : "plan02",
          "description" : "Per account unique handle for the subscription plan. Max length 255 with allowable characters [a-zA-Z0-9_.-@]."
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Plan version",
          "minimum" : 1
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "State of the subscription plan one of the following: `active`, `superseded`, `deleted`",
          "enum" : [ "active", "superseded", "deleted" ]
        },
        "currency" : {
          "type" : "string",
          "example" : "DKK",
          "description" : "Currency for the subscription plan in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+0000",
          "description" : "Date when the subscripton plan was created. In ISO-8601 extended offset date-time format."
        },
        "dunning_plan" : {
          "type" : "string",
          "example" : "dunning_plan_02",
          "description" : "Dunning plan handle"
        },
        "renewal_reminder_email_days" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7,
          "description" : "Optional renewal reminder email settings. Number of days before next billing to send a reminder email.",
          "minimum" : 1
        },
        "trial_reminder_email_days" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7,
          "description" : "Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.",
          "minimum" : 1
        },
        "partial_period_handling" : {
          "type" : "string",
          "example" : "bill_prorated",
          "description" : "How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.",
          "enum" : [ "bill_full", "bill_prorated", "bill_zero_amount", "no_bill" ]
        },
        "include_zero_amount" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to add a zero amount order line to subscription invoices if plan amount is zero or the subscription overrides to zero amount. The default is to not include the line. If no other order lines are present the plan order line will be added."
        },
        "setup_fee" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Optional one-time setup fee billed with the first invoice or as a separate invoice depending on the setting `setup_fee_invoice`.",
          "minimum" : 0
        },
        "setup_fee_text" : {
          "type" : "string",
          "example" : "Subscription setup fee",
          "description" : "Optional invoice order text for the setup fee that"
        },
        "setup_fee_handling" : {
          "type" : "string",
          "example" : "first",
          "description" : "How the billing of the setup fee should be done. The options are: `first` - include setup fee as order line on the first scheduled invoice. `separate` - create a separate invoice for the setup fee, is appropriate if first invoice is not in conjunction with creation. `separate_conditional` - create a separate invoice for setup fee if the first invoice is not created in conjunction with the creation. Default is `first`."
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the amount is including VAT. Default true."
        },
        "fixed_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Fixed number of renewals for subscriptions using this plan. Equals the number of scheduled invoices.",
          "minimum" : 1
        },
        "fixed_life_time_unit" : {
          "type" : "string",
          "example" : "months",
          "description" : "Time unit use for fixed life time",
          "enum" : [ "months", "days" ]
        },
        "fixed_life_time_length" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Fixed life time length for subscriptions using this plan. E.g. 12 months. Subscriptions will cancel after the fixed life time and expire when the active billing cycle ends.",
          "minimum" : 1
        },
        "trial_interval_unit" : {
          "type" : "string",
          "example" : "months",
          "description" : "Time unit for free trial period",
          "enum" : [ "months", "days" ]
        },
        "trial_interval_length" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Free trial interval length. E.g. 1 month.",
          "minimum" : 1
        },
        "interval_length" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "The length of intervals. E.g. every second month or every 14 days.",
          "minimum" : 1
        },
        "schedule_type" : {
          "type" : "string",
          "example" : "month_startdate",
          "description" : "Scheduling type, one of the following: `manual`, `daily`, `weekly_fixedday`, `month_startdate`, `month_fixedday`, `month_lastday`. See documentation for descriptions of the different types.",
          "enum" : [ "manual", "daily", "weekly_fixedday", "month_startdate", "month_fixedday", "month_lastday" ]
        },
        "schedule_fixed_day" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "If a fixed day scheduling type is used a fixed day must be provided. For months the allowed value is 1-28 for weeks it is 1-7",
          "minimum" : 1,
          "maximum" : 28
        },
        "base_month" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "For fixed month schedule types the base month can be used to control which months are eligible for start of first billing period. The eligible months are calculated as `base_month + k * interval_length` up to 12. E.g. to use quaterly billing in the months jan-apr-jul-oct, `base_month` 1 and `interval_length` 3 can be used. If not defined the first fixed day will be used as start of first billing period.",
          "minimum" : 1,
          "maximum" : 12
        },
        "notice_periods" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Optional number of notice periods for a cancel. The subscription will be cancelled for this number of full periods before expiring. Either from the cancellation date, or from the end of the the current period. See `notice_periods_after_current`. The default is to expire at the end of current period (0). A value of 1 (and `notice_periods_after_current` set to true) will for example result in a scenario where the subscription is cancelled until the end of current period, and then for the full subsequent period before expiring.",
          "minimum" : 0
        },
        "notice_periods_after_current" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If notice periods is set, this option controls whether the number of full notice periods should start at the end of the current period, or run from cancellation date and result in a partial period with partial amount for the last period. The default is true. E.g. if set to false and `notice_periods = 1` then the subscription will be cancelled for exactly for one period from the cancellation time and a partial amount will be billed at the start of the next billing period."
        },
        "fixation_periods" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional number of fixation periods. Fixation periods will guarantee that a subscription will have this number of paid full periods before expiring after a cancel. Default is to have no requirement (0).",
          "minimum" : 0
        },
        "fixation_periods_full" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If fixation periods are defined, and the subscription can have a partial prorated first period, this parameter controls if the the last period should be full, or partial to give exactly `fixation_periods` paid periods. Default is false."
        }
      }
    },
    "CreateSubscriptionPlan" : {
      "type" : "object",
      "required" : [ "amount", "handle", "interval_length", "name", "schedule_type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Fitness",
          "description" : "Name of the plan"
        },
        "description" : {
          "type" : "string",
          "example" : "Fitness 149/month subscription",
          "description" : "Description of the plan"
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for this plan. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 25000,
          "description" : "Amount for the plan in the smallest unit for the account currency",
          "minimum" : 0
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional default quantity of the subscription plan product for new subscriptions. Default is 1.",
          "minimum" : 1
        },
        "prepaid" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Subscriptions can either be prepaid where an amount is paid in advance, or the opposite. This setting only relates to handling of pause scenarios."
        },
        "handle" : {
          "type" : "string",
          "example" : "plan02",
          "description" : "Per account unique handle for the subscription plan. Max length 255 with allowable characters [a-zA-Z0-9_.-@]."
        },
        "dunning_plan" : {
          "type" : "string",
          "example" : "dunning_plan_02",
          "description" : "Dunning plan handle"
        },
        "renewal_reminder_email_days" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7,
          "description" : "Optional renewal reminder email settings. Number of days before next billing to send a reminder email.",
          "minimum" : 1
        },
        "trial_reminder_email_days" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7,
          "description" : "Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.",
          "minimum" : 1
        },
        "partial_period_handling" : {
          "type" : "string",
          "example" : "bill_prorated",
          "description" : "How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.",
          "enum" : [ "bill_full", "bill_prorated", "bill_zero_amount", "no_bill" ]
        },
        "include_zero_amount" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to add a zero amount order line to subscription invoices if plan amount is zero or the subscription overrides to zero amount. The default is to not include the line. If no other order lines are present the plan order line will be added."
        },
        "setup_fee" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Optional one-time setup fee billed with the first invoice or as a separate invoice depending on the setting `setup_fee_invoice`.",
          "minimum" : 0
        },
        "setup_fee_text" : {
          "type" : "string",
          "example" : "Subscription setup fee",
          "description" : "Optional invoice order text for the setup fee that"
        },
        "setup_fee_handling" : {
          "type" : "string",
          "example" : "first",
          "description" : "How the billing of the setup fee should be done. The options are: `first` - include setup fee as order line on the first scheduled invoice. `separate` - create a separate invoice for the setup fee, is appropriate if first invoice is not in conjunction with creation. `separate_conditional` - create a separate invoice for setup fee if the first invoice is not created in conjunction with the creation. Default is `first`."
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the amount is including VAT. Default true."
        },
        "fixed_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Fixed number of renewals for subscriptions using this plan. Equals the number of scheduled invoices.",
          "minimum" : 1
        },
        "fixed_life_time_unit" : {
          "type" : "string",
          "example" : "months",
          "description" : "Time unit use for fixed life time",
          "enum" : [ "months", "days" ]
        },
        "fixed_life_time_length" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Fixed life time length for subscriptions using this plan. E.g. 12 months. Subscriptions will cancel after the fixed life time and expire when the active billing cycle ends.",
          "minimum" : 1
        },
        "trial_interval_unit" : {
          "type" : "string",
          "example" : "months",
          "description" : "Time unit for free trial period",
          "enum" : [ "months", "days" ]
        },
        "trial_interval_length" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Free trial interval length. E.g. 1 month.",
          "minimum" : 1
        },
        "interval_length" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "The length of intervals. E.g. every second month or every 14 days.",
          "minimum" : 1
        },
        "schedule_type" : {
          "type" : "string",
          "example" : "month_startdate",
          "description" : "Scheduling type, one of the following: `manual`, `daily`, `weekly_fixedday`, `month_startdate`, `month_fixedday`, `month_lastday`. See documentation for descriptions of the different types.",
          "enum" : [ "manual", "daily", "weekly_fixedday", "month_startdate", "month_fixedday", "month_lastday" ]
        },
        "schedule_fixed_day" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "If a fixed day scheduling type is used a fixed day must be provided. For months the allowed value is 1-28 for weeks it is 1-7",
          "minimum" : 1,
          "maximum" : 28
        },
        "base_month" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "For fixed month schedule types the base month can be used to control which months are eligible for start of first billing period. The eligible months are calculated as `base_month + k * interval_length` up to 12. E.g. to use quaterly billing in the months jan-apr-jul-oct, `base_month` 1 and `interval_length` 3 can be used. If not defined the first fixed day will be used as start of first billing period.",
          "minimum" : 1,
          "maximum" : 12
        },
        "notice_periods" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Optional number of notice periods for a cancel. The subscription will be cancelled for this number of full periods before expiring. Either from the cancellation date, or from the end of the the current period. See `notice_periods_after_current`. The default is to expire at the end of current period (0). A value of 1 (and `notice_periods_after_current` set to true) will for example result in a scenario where the subscription is cancelled until the end of current period, and then for the full subsequent period before expiring.",
          "minimum" : 0
        },
        "notice_periods_after_current" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If notice periods is set, this option controls whether the number of full notice periods should start at the end of the current period, or run from cancellation date and result in a partial period with partial amount for the last period. The default is true. E.g. if set to false and `notice_periods = 1` then the subscription will be cancelled for exactly for one period from the cancellation time and a partial amount will be billed at the start of the next billing period."
        },
        "fixation_periods" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional number of fixation periods. Fixation periods will guarantee that a subscription will have this number of paid full periods before expiring after a cancel. Default is to have no requirement (0).",
          "minimum" : 0
        },
        "fixation_periods_full" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If fixation periods are defined, and the subscription can have a partial prorated first period, this parameter controls if the the last period should be full, or partial to give exactly `fixation_periods` paid periods. Default is false."
        }
      }
    },
    "UpdateSubscriptionPlan" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Fitness",
          "description" : "Name of the plan"
        },
        "description" : {
          "type" : "string",
          "example" : "Fitness 149/month subscription",
          "description" : "Description of the plan"
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for this plan. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "dunning_plan" : {
          "type" : "string",
          "example" : "dunning_plan_02",
          "description" : "Dunning plan handle"
        },
        "renewal_reminder_email_days" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7,
          "description" : "Optional renewal reminder email settings. Number of days before next billing to send a reminder email.",
          "minimum" : 1
        },
        "trial_reminder_email_days" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7,
          "description" : "Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.",
          "minimum" : 1
        },
        "partial_period_handling" : {
          "type" : "string",
          "example" : "bill_prorated",
          "description" : "How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.",
          "enum" : [ "bill_full", "bill_prorated", "bill_zero_amount", "no_bill" ]
        },
        "include_zero_amount" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to add a zero amount order line to subscription invoices if plan amount is zero or the subscription overrides to zero amount. The default is to not include the line. If no other order lines are present the plan order line will be added."
        },
        "setup_fee" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Optional one-time setup fee billed with the first invoice or as a separate invoice depending on the setting `setup_fee_invoice`.",
          "minimum" : 0
        },
        "setup_fee_text" : {
          "type" : "string",
          "example" : "Subscription setup fee",
          "description" : "Optional invoice order text for the setup fee that"
        },
        "setup_fee_handling" : {
          "type" : "string",
          "example" : "first",
          "description" : "How the billing of the setup fee should be done. The options are: `first` - include setup fee as order line on the first scheduled invoice. `separate` - create a separate invoice for the setup fee, is appropriate if first invoice is not in conjunction with creation. `separate_conditional` - create a separate invoice for setup fee if the first invoice is not created in conjunction with the creation. Default is `first`."
        }
      }
    },
    "SupersedeSubscriptionPlan" : {
      "type" : "object",
      "required" : [ "amount", "interval_length", "name", "schedule_type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Fitness",
          "description" : "Name of the plan"
        },
        "description" : {
          "type" : "string",
          "example" : "Fitness 149/month subscription",
          "description" : "Description of the plan"
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for this plan. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 25000,
          "description" : "Amount for the plan in the smallest unit for the account currency",
          "minimum" : 0
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional default quantity of the subscription plan product for new subscriptions. Default is 1.",
          "minimum" : 1
        },
        "prepaid" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Subscriptions can either be prepaid where an amount is paid in advance, or the opposite. This setting only relates to handling of pause scenarios."
        },
        "dunning_plan" : {
          "type" : "string",
          "example" : "dunning_plan_02",
          "description" : "Dunning plan handle"
        },
        "renewal_reminder_email_days" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7,
          "description" : "Optional renewal reminder email settings. Number of days before next billing to send a reminder email.",
          "minimum" : 1
        },
        "trial_reminder_email_days" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7,
          "description" : "Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.",
          "minimum" : 1
        },
        "partial_period_handling" : {
          "type" : "string",
          "example" : "bill_prorated",
          "description" : "How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.",
          "enum" : [ "bill_full", "bill_prorated", "bill_zero_amount", "no_bill" ]
        },
        "include_zero_amount" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to add a zero amount order line to subscription invoices if plan amount is zero or the subscription overrides to zero amount. The default is to not include the line. If no other order lines are present the plan order line will be added."
        },
        "setup_fee" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Optional one-time setup fee billed with the first invoice or as a separate invoice depending on the setting `setup_fee_invoice`.",
          "minimum" : 0
        },
        "setup_fee_text" : {
          "type" : "string",
          "example" : "Subscription setup fee",
          "description" : "Optional invoice order text for the setup fee that"
        },
        "setup_fee_handling" : {
          "type" : "string",
          "example" : "first",
          "description" : "How the billing of the setup fee should be done. The options are: `first` - include setup fee as order line on the first scheduled invoice. `separate` - create a separate invoice for the setup fee, is appropriate if first invoice is not in conjunction with creation. `separate_conditional` - create a separate invoice for setup fee if the first invoice is not created in conjunction with the creation. Default is `first`."
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the amount is including VAT. Default true."
        },
        "fixed_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Fixed number of renewals for subscriptions using this plan. Equals the number of scheduled invoices.",
          "minimum" : 1
        },
        "fixed_life_time_unit" : {
          "type" : "string",
          "example" : "months",
          "description" : "Time unit use for fixed life time",
          "enum" : [ "months", "days" ]
        },
        "fixed_life_time_length" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Fixed life time length for subscriptions using this plan. E.g. 12 months. Subscriptions will cancel after the fixed life time and expire when the active billing cycle ends.",
          "minimum" : 1
        },
        "trial_interval_unit" : {
          "type" : "string",
          "example" : "months",
          "description" : "Time unit for free trial period",
          "enum" : [ "months", "days" ]
        },
        "trial_interval_length" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Free trial interval length. E.g. 1 month.",
          "minimum" : 1
        },
        "interval_length" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "The length of intervals. E.g. every second month or every 14 days.",
          "minimum" : 1
        },
        "schedule_type" : {
          "type" : "string",
          "example" : "month_startdate",
          "description" : "Scheduling type, one of the following: `manual`, `daily`, `weekly_fixedday`, `month_startdate`, `month_fixedday`, `month_lastday`. See documentation for descriptions of the different types.",
          "enum" : [ "manual", "daily", "weekly_fixedday", "month_startdate", "month_fixedday", "month_lastday" ]
        },
        "schedule_fixed_day" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "If a fixed day scheduling type is used a fixed day must be provided. For months the allowed value is 1-28 for weeks it is 1-7",
          "minimum" : 1,
          "maximum" : 28
        },
        "base_month" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "For fixed month schedule types the base month can be used to control which months are eligible for start of first billing period. The eligible months are calculated as `base_month + k * interval_length` up to 12. E.g. to use quaterly billing in the months jan-apr-jul-oct, `base_month` 1 and `interval_length` 3 can be used. If not defined the first fixed day will be used as start of first billing period.",
          "minimum" : 1,
          "maximum" : 12
        },
        "notice_periods" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Optional number of notice periods for a cancel. The subscription will be cancelled for this number of full periods before expiring. Either from the cancellation date, or from the end of the the current period. See `notice_periods_after_current`. The default is to expire at the end of current period (0). A value of 1 (and `notice_periods_after_current` set to true) will for example result in a scenario where the subscription is cancelled until the end of current period, and then for the full subsequent period before expiring.",
          "minimum" : 0
        },
        "notice_periods_after_current" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If notice periods is set, this option controls whether the number of full notice periods should start at the end of the current period, or run from cancellation date and result in a partial period with partial amount for the last period. The default is true. E.g. if set to false and `notice_periods = 1` then the subscription will be cancelled for exactly for one period from the cancellation time and a partial amount will be billed at the start of the next billing period."
        },
        "fixation_periods" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional number of fixation periods. Fixation periods will guarantee that a subscription will have this number of paid full periods before expiring after a cancel. Default is to have no requirement (0).",
          "minimum" : 0
        },
        "fixation_periods_full" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If fixation periods are defined, and the subscription can have a partial prorated first period, this parameter controls if the the last period should be full, or partial to give exactly `fixation_periods` paid periods. Default is false."
        },
        "supersede_mode" : {
          "type" : "string",
          "example" : "instant_sub_update",
          "description" : "Action to take after a subscription plan is superseded, one of the following: `no_sub_update`, `scheduled_sub_update`, `instant_sub_update`. Default is `no_sub_update`.",
          "enum" : [ "no_sub_update", "scheduled_sub_update", "instant_sub_update" ]
        }
      }
    },
    "Subscription" : {
      "type" : "object",
      "required" : [ "cancelled_amount", "cancelled_invoices", "created", "customer", "dunning_amount", "dunning_invoices", "failed_amount", "failed_invoices", "handle", "has_started", "hosted_page_links", "in_trial", "is_cancelled", "payment_method_added", "pending_additional_cost_amount", "pending_additional_costs", "pending_amount", "pending_credit_amount", "pending_credits", "pending_invoices", "plan", "plan_version", "quantity", "refunded_amount", "reminder_email_sent", "renewal_count", "renewing", "settled_amount", "settled_invoices", "start_date", "state", "test", "timezone", "transferred_additional_cost_amount", "transferred_additional_costs", "transferred_credit_amount", "transferred_credits" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "sub000219",
          "description" : "Per account unique handle for subscription"
        },
        "customer" : {
          "type" : "string",
          "example" : "customer00069",
          "description" : "Customer handle"
        },
        "plan" : {
          "type" : "string",
          "example" : "plan0033",
          "description" : "Subscription plan handle"
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "State of the subscription, one of the following: `active`, `expired`, `on_hold` or `pending`. Active subscriptions can be cancelled and will expire at the end of the current billing period, or later depending on optional notice and fixation periods, this can be checked using the `is_cancelled` parameter and `expires`.",
          "enum" : [ "active", "expired", "on_hold", "pending" ]
        },
        "test" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Test flag"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Optional custom plan price. If defined the plan price billed for each billing period will be overridden by this price."
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Quantity of the plan product for this subscription."
        },
        "expires" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Fixed date when the subscription will expire because of cancellation. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "reactivated" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was reactivated from on hold. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "timezone" : {
          "type" : "string",
          "example" : "Europe/Copenhagen",
          "description" : "Time zone for the subscription as standard time zone id. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "activated" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was activated. Will only differ from created in a two step prepared -> activated subscription create scenario. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "renewing" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If the subscription renews at current period end. Also true for subscriptions with manual scheduling."
        },
        "plan_version" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Subscription plan version"
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If optional custom plan price this parameter tells whether the amount is including VAT"
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-14T00:00:00.000+00:00",
          "description" : "Date and time from which the subscription is eligible to schedule invoices. Either from create or from the latest reactivate or subscription change. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-07-14T00:00:00.000+00:00",
          "description" : "Fixed end date and time. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "grace_duration" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 172800,
          "description" : "Grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method."
        },
        "current_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-14T08:12:19.558+00:00",
          "description" : "Start date and time for the current billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "next_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-14T08:12:19.558+00:00",
          "description" : "Start date and time for the next billing period, and also end date and time for the current billing period. Is also the date and time for next invoice if the subscription is renewing. In ISO-8601 extended offset date-time format."
        },
        "first_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-14T08:12:19.558+00:00",
          "description" : "Start date and time for the first ever billing period. In ISO-8601 extended offset date-time format."
        },
        "last_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-03-14T08:12:19.558+00:00",
          "description" : "Start date and time for the previous billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "trial_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-14T08:12:19.558+00:00",
          "description" : "Start date and time of free trial period. In ISO-8601 extended offset date-time format."
        },
        "trial_end" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-07-14T08:12:19.558+00:00",
          "description" : "End date and time of free trial period. In ISO-8601 extended offset date-time format."
        },
        "is_cancelled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the subscription has been cancelled. Cancelled subscriptions will expire at the end of the current billing period."
        },
        "in_trial" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the susbcription is in its trial period. If subscription has not started (has_started), trial_start and trial_end can be used to determine if the subscription will have a trial period."
        },
        "has_started" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If subscription has a later start date, this parameter tells if the subscription has started. Use this in connection with state to determine if a subscription is active."
        },
        "renewal_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Number of renewals for the subscription (number of invoices)",
          "minimum" : 0
        },
        "cancelled_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was cancelled. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "expired_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription expired. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "expire_reason" : {
          "type" : "string",
          "example" : "dunning",
          "description" : "Reason for expire. Can be `ondemand`, `cancelled`, `dunning` or `fixed` ",
          "enum" : [ "dunning", "cancelled", "ondemand", "fixed" ]
        },
        "on_hold_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was put on hold. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "on_hold_reason" : {
          "type" : "string",
          "example" : "ondemand",
          "description" : "Reason for on hold. Can be `ondemand` or `dunning` ",
          "enum" : [ "dunning", "ondemand" ]
        },
        "payment_method_added" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the customer at some point has added payment information to the subscription"
        },
        "scheduled_plan_change" : {
          "type" : "string",
          "example" : "plan000220",
          "description" : "Deprecated - see `pending_change`. If set, a subscription plan change has been scheduled to follow the next renewal. The value is the subscription plan handle to update to."
        },
        "reminder_email_sent" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-04-04T12:40:56.656+00:00",
          "description" : "If defined the date a reminder email was sent for the current billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "failed_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of failed invoices for this subscription"
        },
        "failed_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for failed invoices"
        },
        "cancelled_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of cancelled invoices for this subscription"
        },
        "cancelled_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for cancelled invoices"
        },
        "pending_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of pending invoices for this subscription"
        },
        "pending_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for pending invoices"
        },
        "dunning_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of dunning invoices for this subscription"
        },
        "dunning_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for dunning invoices"
        },
        "settled_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of settled invoices for this subscription"
        },
        "settled_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed settled amount"
        },
        "refunded_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed refunded amount"
        },
        "pending_additional_costs" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of pending additional costs"
        },
        "pending_additional_cost_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount of pending additional costs incl vat"
        },
        "transferred_additional_costs" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of additional costs that have been applied to invoices"
        },
        "transferred_additional_cost_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount of additional costs that have been applied to invoices"
        },
        "pending_credits" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of credits that have not fully been applied to invoices"
        },
        "pending_credit_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed credit amount not yet applied to invoices"
        },
        "transferred_credits" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of credits that have fully been applied to invoices"
        },
        "transferred_credit_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed credit amount that have been applied to invoices"
        },
        "hosted_page_links" : {
          "description" : "Links to hosted pages relating to subscription",
          "$ref" : "#/definitions/SubscriptionLinks"
        },
        "subscription_discounts" : {
          "type" : "array",
          "description" : "List of subscription discounts handles attached to subscription",
          "items" : {
            "type" : "string"
          }
        },
        "pending_change" : {
          "description" : "Pending subscription change to be applied at next renewal",
          "$ref" : "#/definitions/SubscriptionChange"
        },
        "subscription_changes" : {
          "type" : "array",
          "description" : "List of subscription changes both at most one pending and previously applied",
          "items" : {
            "$ref" : "#/definitions/SubscriptionChange"
          }
        },
        "subscription_add_ons" : {
          "type" : "array",
          "description" : "List of subscription add-on handles attached to subscription",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "SubscriptionAddOn" : {
      "type" : "object",
      "required" : [ "add_on", "created", "handle" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "sub002_addon001",
          "description" : "Per subscription unique handle for the subscription add-on."
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Quantity of the subscription add-on. Only defined for quantity type add-ons",
          "minimum" : 1
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Fixed subscription add-on per quantity price. If not defined the subscription add-on uses the add-on price."
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2017-07-04T12:40:56.656+0000",
          "description" : "Date when the subscription add-on was created. In ISO-8601 extended offset date-time format."
        },
        "add_on" : {
          "description" : "Add-on for subscription add-on",
          "$ref" : "#/definitions/AddOn"
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If fixed price this parameter tells whether the amount is including VAT"
        }
      }
    },
    "SubscriptionChange" : {
      "type" : "object",
      "required" : [ "created", "pending" ],
      "properties" : {
        "plan" : {
          "type" : "string",
          "example" : "plan0003",
          "description" : "The handle of the plan to change to"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.",
          "minimum" : 0
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.",
          "minimum" : 1
        },
        "pending" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this is a pending change at next renewal, or it has been applied"
        },
        "applied" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-04T12:40:56.656+00:00",
          "description" : "If defined the change was applied on this date and time"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-04T12:40:56.656+00:00",
          "description" : "Date and time of update of pending change"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-04T12:40:56.656+00:00",
          "description" : "Date when the change was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the optional amount is including VAT. Defaults to true."
        },
        "subscription_add_ons" : {
          "type" : "array",
          "description" : "List of subscription add-ons to create in change",
          "items" : {
            "$ref" : "#/definitions/SubscriptionAddOn"
          }
        },
        "remove_add_ons" : {
          "type" : "array",
          "description" : "Subscription add-ons to remove from subscription by subscription add-on handle",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "SubscriptionLinks" : {
      "type" : "object",
      "required" : [ "payment_info" ],
      "properties" : {
        "payment_info" : {
          "type" : "string",
          "example" : "https://subdomain.reepay.com/paymentinfo/myaccount/4bc5f5f5536146a8b745aeab555162df",
          "description" : "Hosted page for setting payment information on subscription"
        }
      }
    },
    "ExpireSubscription" : {
      "type" : "object",
      "properties" : {
        "compensation_method" : {
          "type" : "string",
          "example" : "prorated_refund",
          "description" : "Optional method for compensation of partial period, either `full_refund`, `prorated_refund` or `none`",
          "enum" : [ "full_refund", "prorated_refund", "none" ]
        }
      }
    },
    "PreparedSubscription" : {
      "type" : "object",
      "required" : [ "cancelled_amount", "cancelled_invoices", "created", "customer", "dunning_amount", "dunning_invoices", "failed_amount", "failed_invoices", "handle", "has_started", "hosted_page_links", "in_trial", "is_cancelled", "payment_method_added", "pending_additional_cost_amount", "pending_additional_costs", "pending_amount", "pending_credit_amount", "pending_credits", "pending_invoices", "plan", "plan_version", "quantity", "refunded_amount", "reminder_email_sent", "renewal_count", "renewing", "settled_amount", "settled_invoices", "start_date", "state", "test", "timezone", "transferred_additional_cost_amount", "transferred_additional_costs", "transferred_credit_amount", "transferred_credits" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "sub000219",
          "description" : "Per account unique handle for subscription"
        },
        "customer" : {
          "type" : "string",
          "example" : "customer00069",
          "description" : "Customer handle"
        },
        "plan" : {
          "type" : "string",
          "example" : "plan0033",
          "description" : "Subscription plan handle"
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "State of the subscription, one of the following: `active`, `expired`, `on_hold` or `pending`. Active subscriptions can be cancelled and will expire at the end of the current billing period, or later depending on optional notice and fixation periods, this can be checked using the `is_cancelled` parameter and `expires`.",
          "enum" : [ "active", "expired", "on_hold", "pending" ]
        },
        "test" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Test flag"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Optional custom plan price. If defined the plan price billed for each billing period will be overridden by this price."
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Quantity of the plan product for this subscription."
        },
        "expires" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Fixed date when the subscription will expire because of cancellation. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "reactivated" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was reactivated from on hold. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "timezone" : {
          "type" : "string",
          "example" : "Europe/Copenhagen",
          "description" : "Time zone for the subscription as standard time zone id. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "activated" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was activated. Will only differ from created in a two step prepared -> activated subscription create scenario. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "renewing" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If the subscription renews at current period end. Also true for subscriptions with manual scheduling."
        },
        "invoices" : {
          "type" : "array",
          "description" : "List of created (prepared) invoices for prepared subscription",
          "items" : {
            "$ref" : "#/definitions/Invoice"
          }
        },
        "plan_version" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Subscription plan version"
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If optional custom plan price this parameter tells whether the amount is including VAT"
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-14T00:00:00.000+00:00",
          "description" : "Date and time from which the subscription is eligible to schedule invoices. Either from create or from the latest reactivate or subscription change. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-07-14T00:00:00.000+00:00",
          "description" : "Fixed end date and time. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "grace_duration" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 172800,
          "description" : "Grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method."
        },
        "current_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-14T08:12:19.558+00:00",
          "description" : "Start date and time for the current billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "next_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-14T08:12:19.558+00:00",
          "description" : "Start date and time for the next billing period, and also end date and time for the current billing period. Is also the date and time for next invoice if the subscription is renewing. In ISO-8601 extended offset date-time format."
        },
        "first_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-14T08:12:19.558+00:00",
          "description" : "Start date and time for the first ever billing period. In ISO-8601 extended offset date-time format."
        },
        "last_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-03-14T08:12:19.558+00:00",
          "description" : "Start date and time for the previous billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "trial_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-14T08:12:19.558+00:00",
          "description" : "Start date and time of free trial period. In ISO-8601 extended offset date-time format."
        },
        "trial_end" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-07-14T08:12:19.558+00:00",
          "description" : "End date and time of free trial period. In ISO-8601 extended offset date-time format."
        },
        "is_cancelled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the subscription has been cancelled. Cancelled subscriptions will expire at the end of the current billing period."
        },
        "in_trial" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the susbcription is in its trial period. If subscription has not started (has_started), trial_start and trial_end can be used to determine if the subscription will have a trial period."
        },
        "has_started" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If subscription has a later start date, this parameter tells if the subscription has started. Use this in connection with state to determine if a subscription is active."
        },
        "renewal_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Number of renewals for the subscription (number of invoices)",
          "minimum" : 0
        },
        "cancelled_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was cancelled. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "expired_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription expired. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "expire_reason" : {
          "type" : "string",
          "example" : "dunning",
          "description" : "Reason for expire. Can be `ondemand`, `cancelled`, `dunning` or `fixed` ",
          "enum" : [ "dunning", "cancelled", "ondemand", "fixed" ]
        },
        "on_hold_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was put on hold. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "on_hold_reason" : {
          "type" : "string",
          "example" : "ondemand",
          "description" : "Reason for on hold. Can be `ondemand` or `dunning` ",
          "enum" : [ "dunning", "ondemand" ]
        },
        "payment_method_added" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the customer at some point has added payment information to the subscription"
        },
        "scheduled_plan_change" : {
          "type" : "string",
          "example" : "plan000220",
          "description" : "Deprecated - see `pending_change`. If set, a subscription plan change has been scheduled to follow the next renewal. The value is the subscription plan handle to update to."
        },
        "reminder_email_sent" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-04-04T12:40:56.656+00:00",
          "description" : "If defined the date a reminder email was sent for the current billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "failed_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of failed invoices for this subscription"
        },
        "failed_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for failed invoices"
        },
        "cancelled_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of cancelled invoices for this subscription"
        },
        "cancelled_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for cancelled invoices"
        },
        "pending_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of pending invoices for this subscription"
        },
        "pending_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for pending invoices"
        },
        "dunning_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of dunning invoices for this subscription"
        },
        "dunning_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for dunning invoices"
        },
        "settled_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of settled invoices for this subscription"
        },
        "settled_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed settled amount"
        },
        "refunded_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed refunded amount"
        },
        "pending_additional_costs" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of pending additional costs"
        },
        "pending_additional_cost_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount of pending additional costs incl vat"
        },
        "transferred_additional_costs" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of additional costs that have been applied to invoices"
        },
        "transferred_additional_cost_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount of additional costs that have been applied to invoices"
        },
        "pending_credits" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of credits that have not fully been applied to invoices"
        },
        "pending_credit_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed credit amount not yet applied to invoices"
        },
        "transferred_credits" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of credits that have fully been applied to invoices"
        },
        "transferred_credit_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed credit amount that have been applied to invoices"
        },
        "hosted_page_links" : {
          "description" : "Links to hosted pages relating to subscription",
          "$ref" : "#/definitions/SubscriptionLinks"
        },
        "subscription_discounts" : {
          "type" : "array",
          "description" : "List of subscription discounts handles attached to subscription",
          "items" : {
            "type" : "string"
          }
        },
        "pending_change" : {
          "description" : "Pending subscription change to be applied at next renewal",
          "$ref" : "#/definitions/SubscriptionChange"
        },
        "subscription_changes" : {
          "type" : "array",
          "description" : "List of subscription changes both at most one pending and previously applied",
          "items" : {
            "$ref" : "#/definitions/SubscriptionChange"
          }
        },
        "subscription_add_ons" : {
          "type" : "array",
          "description" : "List of subscription add-on handles attached to subscription",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "CreatePreparedSubscription" : {
      "type" : "object",
      "required" : [ "plan" ],
      "properties" : {
        "customer" : {
          "type" : "string",
          "example" : "cust_0001",
          "description" : "Customer handle of existing customer. Customer can also be provided in same operation by supplying the parameter `create_customer`."
        },
        "plan" : {
          "type" : "string",
          "example" : "plan0001",
          "description" : "Plan handle"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.",
          "minimum" : 0
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.",
          "minimum" : 1
        },
        "test" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Test flag. If given it will be verified that the account state matches the intended create state."
        },
        "handle" : {
          "type" : "string",
          "example" : "sub0002",
          "description" : "Per account unique handle for the subscription. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle not defined."
        },
        "create_customer" : {
          "description" : "Create customer and subscription in an atomic operation",
          "$ref" : "#/definitions/CreateCustomer"
        },
        "plan_version" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Optional plan version, default is to use newest version of plan",
          "minimum" : 1
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the optional amount is including VAT. Defaults to true."
        },
        "generate_handle" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Auto generate handle on the form sub-[sequence_number]"
        },
        "start_date" : {
          "type" : "string",
          "example" : "2015-05-14T00:00:00",
          "description" : "Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` from which the subscription is eligible to schedule first invoice. If no time part is given start of day will be used. A start date in the past can be used, but no more than one period length in the past. A start date in the past can result in an instant invoice for a past billing period start. Default value is current date and time."
        },
        "end_date" : {
          "type" : "string",
          "example" : "2015-12-01",
          "description" : "Fixed date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` where the subscription will automatically cancel. The subscription will expire at the end of the billing period containing the end date. Default is no fixed end date."
        },
        "grace_duration" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 172800,
          "description" : "A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.",
          "minimum" : 0
        },
        "no_trial" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Override plan trial settings and disable trial"
        },
        "no_setup_fee" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Override plan setup fee settings and disable fee"
        },
        "subscription_discounts" : {
          "type" : "array",
          "description" : "Discounts to attach to subscription",
          "items" : {
            "$ref" : "#/definitions/CreateSubscriptionDiscount"
          }
        },
        "coupon_codes" : {
          "type" : "array",
          "description" : "Coupon codes to redeem for subscription",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "add_ons" : {
          "type" : "array",
          "description" : "Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on.",
          "items" : {
            "$ref" : "#/definitions/CreateSubscriptionAddOn"
          }
        },
        "additional_costs" : {
          "type" : "array",
          "description" : "Additional costs to add to subscription at creation time",
          "items" : {
            "$ref" : "#/definitions/CreateSubscriptionAdditionalCost"
          }
        }
      }
    },
    "CreateSubscriptionAddOn" : {
      "type" : "object",
      "required" : [ "add_on", "handle" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "sub002_addon001",
          "description" : "Optional per subscription unique handle for the subscription add-on. If not defined the handle will default to the add-on handle, this means that by default an add-on can only be attached once to each subscription. The handle can be used to link the subscription add-on to an entity like computer serial number or vehicle license plate."
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional quantity of the of the add-on for this subscription. Defaults to 1. May only be provided for add-on with type `quantity`.",
          "minimum" : 1
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Optional custom fixed per quantity add-on price. If provided the add-on price billed for each billing period will be overridden by this price. Implicitly defines `fixed_amount` as true. Cannot be provided with `fixed_amount` false.",
          "minimum" : 0
        },
        "add_on" : {
          "type" : "string",
          "example" : "addon_001",
          "description" : "Add-on for subscription add-on"
        },
        "fixed_amount" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the price of the subscription add-on should be fixed to the current price of add-on, or the price should follow the add-on price. Defaults to true. If set to false the price of the add-on will be determined by the add-on price at the time of subscription billing."
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the optional amount is including VAT. Defaults to true."
        }
      }
    },
    "CreateSubscriptionAdditionalCost" : {
      "type" : "object",
      "required" : [ "amount", "handle", "ordertext" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "cost032",
          "description" : "Per account unique handle for the additional cost"
        },
        "ordertext" : {
          "type" : "string",
          "example" : "Yoga mat",
          "description" : "Order text for the additional cost. Will be on affected invoices."
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Quantity for the additional cost. Default 1.",
          "minimum" : 1
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Per quantity amount in the smallest unit for the account currency",
          "minimum" : 0
        },
        "vat" : {
          "type" : "number",
          "format" : "float",
          "example" : 0.25,
          "description" : "Optional vat for additional cost. Account default is used if none given.",
          "minimum" : 0,
          "maximum" : 1
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the per quantity amount is including VAT. Defaults to true."
        }
      }
    },
    "CreateSubscriptionDiscount" : {
      "type" : "object",
      "required" : [ "discount", "handle" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "sub002_discount001",
          "description" : "Per subscription unique handle for the subscription discount."
        },
        "discount" : {
          "type" : "string",
          "example" : "discount001",
          "description" : "Discount for subscription discount"
        },
        "name" : {
          "type" : "string",
          "example" : "Gold member discount",
          "description" : "Optional name overriding discount name"
        },
        "description" : {
          "type" : "string",
          "example" : "Discount for members part of the Gold programme",
          "description" : "Optional description overriding discount description"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Optional overriding fixed amount from discount",
          "minimum" : 1
        },
        "percentage" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 25,
          "description" : "Optional percentage overriding percentage from discount",
          "minimum" : 1,
          "maximum" : 100
        },
        "apply_to" : {
          "type" : "array",
          "example" : "all",
          "description" : "Optional overriding discount settings",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "fixed_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Optioanl overriding discount settings",
          "minimum" : 1
        },
        "fixed_period_unit" : {
          "type" : "string",
          "example" : "months",
          "description" : "Optioanl overriding discount settings",
          "enum" : [ "months", "days" ]
        },
        "fixed_period" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Optioanl overriding discount settings",
          "minimum" : 1
        }
      }
    },
    "CancelSubscription" : {
      "type" : "object",
      "properties" : {
        "notice_periods" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional override of the notice periods set for plan. See plan for the definition of notice periods."
        },
        "notice_periods_after_current" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Optional override of the notice periods after current setting for plan. See plan for the definition of notice periods."
        },
        "expire_at" : {
          "type" : "string",
          "example" : "2017-12-01",
          "description" : "Optional fixed date and time on when the subscription should expire. The fixed expire date takes precedence over notice periods and fixation periods. The fixed expire date must be after the end of the current periods. On the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`."
        }
      }
    },
    "OnHoldSubscription" : {
      "type" : "object",
      "properties" : {
        "compensation_method" : {
          "type" : "string",
          "example" : "prorated_refund",
          "description" : "Optional method for compensation of partial period, either `full_refund`, `prorated_refund`, `full_credit`, `prorated_credit` or `none`. Default is `prorated_refund`",
          "enum" : [ "full_refund", "prorated_refund", "full_credit", "prorated_credit", "none" ]
        }
      }
    },
    "ReactivateSubscription" : {
      "type" : "object",
      "properties" : {
        "start_date" : {
          "type" : "string",
          "example" : "2015-05-14T00:00:00",
          "description" : "Optional date and time from which the subscription is eligible to schedule first invoice after reactivation. If no time part is given start of day will be used. A start date in the past can be used, but not before the date when the subscription was put on hold. A start date in the past can result in invoices for past billing periods. Default value is current date and time. On the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`"
        },
        "partial_period_handling" : {
          "type" : "string",
          "example" : "bill_prorated",
          "description" : "Optional argument to override plan setting on how to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.",
          "enum" : [ "bill_full", "bill_prorated", "bill_zero_amount", "no_bill" ]
        }
      }
    },
    "ChangeSubscription" : {
      "type" : "object",
      "required" : [ "timing" ],
      "properties" : {
        "timing" : {
          "type" : "string",
          "example" : "renewal",
          "description" : "When to perform the subscription change. Either `immediate` or `renewal`.",
          "enum" : [ "immediate", "renewal" ]
        },
        "plan" : {
          "type" : "string",
          "example" : "plan0003",
          "description" : "The handle of the plan to change to"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.",
          "minimum" : 0
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.",
          "minimum" : 1
        },
        "billing" : {
          "type" : "string",
          "example" : "prorated",
          "description" : "In the case of immediate change and change not affecting billing period, how to bill for the remaining partial period. Either `prorated`, `full`, `zero_amount` or `none`. The default is `prorated`.",
          "enum" : [ "prorated", "full", "zero_amount", "none" ]
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the optional amount is including VAT. Defaults to true."
        },
        "compensation_method" : {
          "type" : "string",
          "example" : "prorated_refund",
          "description" : "In the case of immediate change, optional method for compensation of partial period, either `full_refund`, `prorated_refund`, `full_credit`, `prorated_credit` or `none`. Default is `prorated_refund`",
          "enum" : [ "full_refund", "prorated_refund", "full_credit", "prorated_credit", "none" ]
        },
        "partial_period_handling" : {
          "type" : "string",
          "example" : "bill_prorated",
          "description" : "Optional argument to override plan setting on how to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amount, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.",
          "enum" : [ "bill_full", "bill_prorated", "bill_zero_amount", "no_bill" ]
        },
        "start_date" : {
          "type" : "string",
          "example" : "2015-05-14T00:00:00",
          "description" : "If the subscription change results in a new period due to change to a plan with different scheduling, an optional date and time from which the subscription is eligible to schedule first invoice can be given. See subscription create and subscription reactivate argument `start_date`."
        },
        "cancel_change" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If there are pending changes at renewal for the subscription they can be cancelled using this argument and timing=renewal"
        },
        "add_ons" : {
          "type" : "array",
          "description" : "Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on.",
          "items" : {
            "$ref" : "#/definitions/CreateSubscriptionAddOn"
          }
        },
        "remove_add_ons" : {
          "type" : "array",
          "description" : "Subscription add-ons to remove from subscription by subscription add-on handle",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ChangedSubscription" : {
      "type" : "object",
      "required" : [ "cancelled_amount", "cancelled_invoices", "created", "customer", "dunning_amount", "dunning_invoices", "failed_amount", "failed_invoices", "handle", "has_started", "hosted_page_links", "in_trial", "is_cancelled", "payment_method_added", "pending_additional_cost_amount", "pending_additional_costs", "pending_amount", "pending_credit_amount", "pending_credits", "pending_invoices", "plan", "plan_version", "quantity", "refunded_amount", "reminder_email_sent", "renewal_count", "renewing", "settled_amount", "settled_invoices", "start_date", "state", "test", "timezone", "transferred_additional_cost_amount", "transferred_additional_costs", "transferred_credit_amount", "transferred_credits" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "sub000219",
          "description" : "Per account unique handle for subscription"
        },
        "customer" : {
          "type" : "string",
          "example" : "customer00069",
          "description" : "Customer handle"
        },
        "plan" : {
          "type" : "string",
          "example" : "plan0033",
          "description" : "Subscription plan handle"
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "State of the subscription, one of the following: `active`, `expired`, `on_hold` or `pending`. Active subscriptions can be cancelled and will expire at the end of the current billing period, or later depending on optional notice and fixation periods, this can be checked using the `is_cancelled` parameter and `expires`.",
          "enum" : [ "active", "expired", "on_hold", "pending" ]
        },
        "test" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Test flag"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Optional custom plan price. If defined the plan price billed for each billing period will be overridden by this price."
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Quantity of the plan product for this subscription."
        },
        "expires" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Fixed date when the subscription will expire because of cancellation. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "reactivated" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was reactivated from on hold. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "timezone" : {
          "type" : "string",
          "example" : "Europe/Copenhagen",
          "description" : "Time zone for the subscription as standard time zone id. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "activated" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was activated. Will only differ from created in a two step prepared -> activated subscription create scenario. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "renewing" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If the subscription renews at current period end. Also true for subscriptions with manual scheduling."
        },
        "plan_version" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Subscription plan version"
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If optional custom plan price this parameter tells whether the amount is including VAT"
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-14T00:00:00.000+00:00",
          "description" : "Date and time from which the subscription is eligible to schedule invoices. Either from create or from the latest reactivate or subscription change. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-07-14T00:00:00.000+00:00",
          "description" : "Fixed end date and time. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "grace_duration" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 172800,
          "description" : "Grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method."
        },
        "current_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-14T08:12:19.558+00:00",
          "description" : "Start date and time for the current billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "next_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-05-14T08:12:19.558+00:00",
          "description" : "Start date and time for the next billing period, and also end date and time for the current billing period. Is also the date and time for next invoice if the subscription is renewing. In ISO-8601 extended offset date-time format."
        },
        "first_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-02-14T08:12:19.558+00:00",
          "description" : "Start date and time for the first ever billing period. In ISO-8601 extended offset date-time format."
        },
        "last_period_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-03-14T08:12:19.558+00:00",
          "description" : "Start date and time for the previous billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "trial_start" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-14T08:12:19.558+00:00",
          "description" : "Start date and time of free trial period. In ISO-8601 extended offset date-time format."
        },
        "trial_end" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-07-14T08:12:19.558+00:00",
          "description" : "End date and time of free trial period. In ISO-8601 extended offset date-time format."
        },
        "is_cancelled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the subscription has been cancelled. Cancelled subscriptions will expire at the end of the current billing period."
        },
        "in_trial" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the susbcription is in its trial period. If subscription has not started (has_started), trial_start and trial_end can be used to determine if the subscription will have a trial period."
        },
        "has_started" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If subscription has a later start date, this parameter tells if the subscription has started. Use this in connection with state to determine if a subscription is active."
        },
        "renewal_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Number of renewals for the subscription (number of invoices)",
          "minimum" : 0
        },
        "cancelled_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was cancelled. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "expired_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription expired. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "expire_reason" : {
          "type" : "string",
          "example" : "dunning",
          "description" : "Reason for expire. Can be `ondemand`, `cancelled`, `dunning` or `fixed` ",
          "enum" : [ "dunning", "cancelled", "ondemand", "fixed" ]
        },
        "on_hold_date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-06-04T12:40:56.656+00:00",
          "description" : "Date when the subscription was put on hold. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "on_hold_reason" : {
          "type" : "string",
          "example" : "ondemand",
          "description" : "Reason for on hold. Can be `ondemand` or `dunning` ",
          "enum" : [ "dunning", "ondemand" ]
        },
        "payment_method_added" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the customer at some point has added payment information to the subscription"
        },
        "scheduled_plan_change" : {
          "type" : "string",
          "example" : "plan000220",
          "description" : "Deprecated - see `pending_change`. If set, a subscription plan change has been scheduled to follow the next renewal. The value is the subscription plan handle to update to."
        },
        "reminder_email_sent" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-04-04T12:40:56.656+00:00",
          "description" : "If defined the date a reminder email was sent for the current billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "failed_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of failed invoices for this subscription"
        },
        "failed_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for failed invoices"
        },
        "cancelled_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of cancelled invoices for this subscription"
        },
        "cancelled_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for cancelled invoices"
        },
        "pending_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of pending invoices for this subscription"
        },
        "pending_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for pending invoices"
        },
        "dunning_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of dunning invoices for this subscription"
        },
        "dunning_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount for dunning invoices"
        },
        "settled_invoices" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of settled invoices for this subscription"
        },
        "settled_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed settled amount"
        },
        "refunded_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed refunded amount"
        },
        "pending_additional_costs" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of pending additional costs"
        },
        "pending_additional_cost_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount of pending additional costs incl vat"
        },
        "transferred_additional_costs" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of additional costs that have been applied to invoices"
        },
        "transferred_additional_cost_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed amount of additional costs that have been applied to invoices"
        },
        "pending_credits" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of credits that have not fully been applied to invoices"
        },
        "pending_credit_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed credit amount not yet applied to invoices"
        },
        "transferred_credits" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Number of credits that have fully been applied to invoices"
        },
        "transferred_credit_amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Summed credit amount that have been applied to invoices"
        },
        "hosted_page_links" : {
          "description" : "Links to hosted pages relating to subscription",
          "$ref" : "#/definitions/SubscriptionLinks"
        },
        "subscription_discounts" : {
          "type" : "array",
          "description" : "List of subscription discounts handles attached to subscription",
          "items" : {
            "type" : "string"
          }
        },
        "pending_change" : {
          "description" : "Pending subscription change to be applied at next renewal",
          "$ref" : "#/definitions/SubscriptionChange"
        },
        "subscription_changes" : {
          "type" : "array",
          "description" : "List of subscription changes both at most one pending and previously applied",
          "items" : {
            "$ref" : "#/definitions/SubscriptionChange"
          }
        },
        "subscription_add_ons" : {
          "type" : "array",
          "description" : "List of subscription add-on handles attached to subscription",
          "items" : {
            "type" : "string"
          }
        },
        "change_journal" : {
          "description" : "Object describing the result of a subscription change",
          "$ref" : "#/definitions/SubscriptionChangeJournal"
        }
      }
    },
    "SubscriptionChangeJournal" : {
      "type" : "object",
      "properties" : {
        "change" : {
          "description" : "Subscription change object applied, if null the change has no impact",
          "$ref" : "#/definitions/SubscriptionChange"
        },
        "invoice" : {
          "description" : "New invoice the change resulted in",
          "$ref" : "#/definitions/Invoice"
        },
        "new_plan" : {
          "description" : "Subscription plan object if change resulted in a new plan",
          "$ref" : "#/definitions/Plan"
        },
        "compensation_amount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "If compensation the compensation amount"
        },
        "compensation_invoice" : {
          "description" : "If compensation the credited or refunded invoice. The latest credit note gives details on the crediting.",
          "$ref" : "#/definitions/Invoice"
        },
        "changed_period_start_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "If the change resulted in a new billing cycle this is the start date used"
        }
      }
    },
    "ChangeNextPeriodStart" : {
      "type" : "object",
      "required" : [ "next_period_start" ],
      "properties" : {
        "next_period_start" : {
          "type" : "string",
          "example" : "2015-12-23",
          "description" : "Date and time of requested next period start on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`. The date and time must be in the future."
        }
      }
    },
    "IntervalAmount" : {
      "type" : "object",
      "required" : [ "amount", "currency", "from", "to" ],
      "properties" : {
        "from" : {
          "type" : "string",
          "example" : "2015-05-30",
          "description" : "From date on the form yyyy-MM-dd"
        },
        "to" : {
          "type" : "string",
          "example" : "2015-07-15",
          "description" : "To date on the form yyyy-MM-dd"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12000,
          "description" : "Amount corresponding to the interval in the smallest unit for the currency",
          "minimum" : 0
        },
        "currency" : {
          "type" : "string",
          "example" : "DKK",
          "description" : "Currency in ISO 4217 three letter alpha code"
        }
      }
    },
    "SetPaymentMethod" : {
      "type" : "object",
      "properties" : {
        "source" : {
          "type" : "string",
          "example" : "ct_f96004cae4308473c92bea0638b5b688",
          "description" : "The payment method source. Either an existing payment method for the customer, e.g. existing card id `ca_...` or a card token `ct_...` generated with [Reepay Token](https://docs.reepay.com/token/) or [Reepay JS Library](https://docs.reepay.com/js/)."
        }
      }
    },
    "CreateSubscriptionInvoice" : {
      "type" : "object",
      "required" : [ "handle" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "invoice-007",
          "description" : "Per account unique handle for the invoice. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. It is recommended to use a maximum of 20 characters as this will allow for the use of handle as reference on bank statements without truncation."
        },
        "instant" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Create and process invoice instantly and leave as either `settled` or `failed`. The default is to leave the invoice for automatic processing and potential dunning management as other subscription invoices (default false)."
        },
        "due" : {
          "type" : "string",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Optional due date and time on the form yyyy-MM-dd, yyyyMMdd, yyyy-MM-ddTHH:mm and yyyy-MM-ddTHH:mm:ss from which the invoice is eligible to be collected. Will not be used when `instant` is used. "
        },
        "settle" : {
          "description" : "Optional settle to perform after creation using a different payment method. If the settle fails the status will be `failed` if instant or `pending` if not instant. The `due` date will be ignored for subscription invoice create.",
          "$ref" : "#/definitions/Settle"
        },
        "plan_manual" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Create manually for plan by adding plan product and potential add-ons as order line (default false)"
        },
        "collect_additional_costs" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Collect pending additional costs and transfer to invoice (default true)"
        },
        "collect_credit" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Collect pending credit and transfer to invoice (default true)"
        },
        "apply_discounts" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Apply potential discounts for the subscription to the invoice order lines (default true)"
        },
        "order_lines" : {
          "type" : "array",
          "description" : "Optional additional order lines for the invoice",
          "items" : {
            "$ref" : "#/definitions/CreateOrderLine"
          }
        },
        "manual_transfer" : {
          "description" : "Optional manual transfer. If given the invoice will be settled using the manual transfer transaction.",
          "$ref" : "#/definitions/ManualSettleTransfer"
        },
        "billing_address" : {
          "description" : "Optional billing address",
          "$ref" : "#/definitions/InvoiceBillingAddress"
        },
        "shipping_address" : {
          "description" : "Optional shipping address",
          "$ref" : "#/definitions/InvoiceShippingAddress"
        }
      }
    },
    "SubscriptionDiscount" : {
      "type" : "object",
      "required" : [ "apply_to", "count", "created", "discount", "fixed_period_passed", "fixed_usage_reached", "handle", "invoices", "name", "state" ],
      "properties" : {
        "handle" : {
          "type" : "string",
          "example" : "sub002_discount001",
          "description" : "Per subscription unique handle for the subscription discount."
        },
        "discount" : {
          "type" : "string",
          "example" : "discount001",
          "description" : "Discount for subscription discount"
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "Discount state `active` or `disabled`.",
          "enum" : [ "active", "disabled" ]
        },
        "coupon" : {
          "type" : "string",
          "example" : "coupon0002",
          "description" : "Coupon reference if this discount was released by a coupon code"
        },
        "deleted" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-08-04T14:41:30.333+0000",
          "description" : "Date when the discount was deleted if deleted. In ISO-8601 extended offset date-time format."
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-07-04T12:40:56.656+0000",
          "description" : "Date when the discount was created. In ISO-8601 extended offset date-time format."
        },
        "name" : {
          "type" : "string",
          "example" : "Gold member discount",
          "description" : "Name of discount. Will be used as order line text."
        },
        "description" : {
          "type" : "string",
          "example" : "Discount for members part of the Gold programme",
          "description" : "Optional description of discount"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10000,
          "description" : "Fixed amount discount deducted from order line amounts including VAT",
          "minimum" : 1
        },
        "percentage" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 25,
          "description" : "Percentage discount applied to each applicable order line",
          "minimum" : 1,
          "maximum" : 100
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Number of invoices this subscription discount has been applied to"
        },
        "invoices" : {
          "type" : "array",
          "description" : "List of invoices this subscription discount has been applied to",
          "items" : {
            "type" : "string"
          }
        },
        "apply_to" : {
          "type" : "array",
          "example" : "all",
          "description" : "Which order lines the discount is applicable to: `all`, `setup_fee`, `plan`, `additional_cost`, `add_on` and `ondemand`",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "fixed_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Apply discount to a fixed number of invoices",
          "minimum" : 1
        },
        "fixed_period_unit" : {
          "type" : "string",
          "example" : "months",
          "description" : "Time unit use for fixed valid period",
          "enum" : [ "months", "days" ]
        },
        "fixed_period" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 12,
          "description" : "Fixed period length e.g. 12 months or 14 days",
          "minimum" : 1
        },
        "fixed_usage_reached" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether fixed usage for subscription discount has been reached"
        },
        "fixed_period_passed" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether fixed period for subscription discount has been passed"
        }
      }
    },
    "CouponRedemption" : {
      "type" : "object",
      "required" : [ "coupon", "subscription_discount" ],
      "properties" : {
        "coupon" : {
          "description" : "Coupon redeemed",
          "$ref" : "#/definitions/Coupon"
        },
        "subscription_discount" : {
          "description" : "Subscription discount released by coupon",
          "$ref" : "#/definitions/SubscriptionDiscount"
        }
      }
    },
    "RedeemCouponCode" : {
      "type" : "object",
      "required" : [ "code" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "example" : "specialoffer2016",
          "description" : "Coupon code"
        }
      }
    },
    "SubscriptionPeriodBalance" : {
      "type" : "object",
      "properties" : {
        "date" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2016-10-14T21:22:45.312+00:00",
          "description" : "Date in period for this period balance"
        },
        "invoice" : {
          "description" : "Invoice for period, if it exists. See `period_from` and `period_to` for period start and end.",
          "$ref" : "#/definitions/Invoice"
        },
        "paid" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The plan amount paid and settled for this period"
        },
        "consumed" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The partial plan amount consumed up to date for this period"
        },
        "remaining" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The partial plan amount remaining for this period. This amount can be refunded in the case the subscription is expired or put on hold and the amount has been paid."
        },
        "creditable" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The amount that can be credited for the period invoice"
        },
        "period_amount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Full period amount for period"
        },
        "online_refundable" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The amount that can be online refunded on the subscription"
        }
      }
    },
    "SubscriptionSearch" : {
      "type" : "object",
      "required" : [ "content", "count", "page", "size", "total_elements", "total_pages" ],
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Number of current page in paginated list",
          "minimum" : 1
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Page size in paginated list",
          "minimum" : 1
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 50,
          "description" : "Number of elements in current page",
          "minimum" : 0
        },
        "search" : {
          "type" : "string",
          "example" : "state:active,handle;myhandle",
          "description" : "Optional search expression used"
        },
        "sort" : {
          "type" : "string",
          "example" : "-created",
          "description" : "Optional sort expression used"
        },
        "content" : {
          "type" : "array",
          "description" : "List of subscriptions for current page",
          "items" : {
            "$ref" : "#/definitions/Subscription"
          }
        },
        "total_elements" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 500,
          "description" : "Total number of elements in paginated list",
          "minimum" : 0
        },
        "total_pages" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "Total number of pages in paginated list",
          "minimum" : 0
        }
      },
      "description" : "A page in a paginated subscription search"
    },
    "CreateSubscription" : {
      "type" : "object",
      "required" : [ "plan", "signup_method" ],
      "properties" : {
        "customer" : {
          "type" : "string",
          "example" : "cust_0001",
          "description" : "Customer handle of existing customer. Customer can also be provided in same operation by supplying the parameter `create_customer`."
        },
        "plan" : {
          "type" : "string",
          "example" : "plan0001",
          "description" : "Plan handle"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20000,
          "description" : "Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.",
          "minimum" : 0
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.",
          "minimum" : 1
        },
        "test" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Test flag. If given it will be verified that the account state matches the intended create state."
        },
        "handle" : {
          "type" : "string",
          "example" : "sub0002",
          "description" : "Per account unique handle for the subscription. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle not defined."
        },
        "source" : {
          "type" : "string",
          "example" : "ct_f96004cae4308473c92bea0638b5b688",
          "description" : "The payment method source if signup method `source`. Either an existing payment method for the customer, e.g. existing card id `ca_...` or a card token `ct_...` generated with [Reepay Token](https://docs.reepay.com/token/) or [Reepay JS Library](https://docs.reepay.com/js/)."
        },
        "create_customer" : {
          "description" : "Create customer and subscription in an atomic operation",
          "$ref" : "#/definitions/CreateCustomer"
        },
        "plan_version" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Optional plan version, default is to use newest version of plan",
          "minimum" : 1
        },
        "amount_incl_vat" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether the optional amount is including VAT. Defaults to true."
        },
        "generate_handle" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Auto generate handle on the form sub-[sequence_number]"
        },
        "start_date" : {
          "type" : "string",
          "example" : "2015-05-14T00:00:00",
          "description" : "Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` from which the subscription is eligible to schedule first invoice. If no time part is given start of day will be used. A start date in the past can be used, but no more than one period length in the past. A start date in the past can result in an instant invoice for a past billing period start. Default value is current date and time."
        },
        "end_date" : {
          "type" : "string",
          "example" : "2015-12-01",
          "description" : "Fixed date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` where the subscription will automatically cancel. The subscription will expire at the end of the billing period containing the end date. Default is no fixed end date."
        },
        "grace_duration" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 172800,
          "description" : "A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.",
          "minimum" : 0
        },
        "no_trial" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Override plan trial settings and disable trial"
        },
        "no_setup_fee" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Override plan setup fee settings and disable fee"
        },
        "subscription_discounts" : {
          "type" : "array",
          "description" : "Discounts to attach to subscription",
          "items" : {
            "$ref" : "#/definitions/CreateSubscriptionDiscount"
          }
        },
        "coupon_codes" : {
          "type" : "array",
          "description" : "Coupon codes to redeem for subscription",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "add_ons" : {
          "type" : "array",
          "description" : "Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on.",
          "items" : {
            "$ref" : "#/definitions/CreateSubscriptionAddOn"
          }
        },
        "additional_costs" : {
          "type" : "array",
          "description" : "Additional costs to add to subscription at creation time",
          "items" : {
            "$ref" : "#/definitions/CreateSubscriptionAdditionalCost"
          }
        },
        "signup_method" : {
          "type" : "string",
          "example" : "source",
          "description" : "The signup method, how to get payment information from customer, one of the following: `source`, `email`, `link`. The `source` method takes a token (e.g. card token `ct_..`) or a reference to an existing customer payment method (e.g. card `ca_..`). The method `email` will send an email to customer requesting payment information with a link to a hosted page. The method `link` does not do anything but the hosted page link in the subscription object can be provided to the customer as a link to enter payment information."
        },
        "conditional_create" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If the subscription is eligible to bill for the first period right away, this option will make the creation conditional on a successful payment of the first invoice. Will require a signup method of `source`. Default is false."
        }
      }
    },
    "UserAccount" : {
      "type" : "object",
      "required" : [ "email", "groups", "id", "permissions", "state", "verified_email" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "fbfab4017714418f969fa5697383e47c",
          "description" : "Unique id for the user assigned by Reepay"
        },
        "email" : {
          "type" : "string",
          "example" : "test@example.com",
          "description" : "User email"
        },
        "name" : {
          "type" : "string",
          "example" : "John Johnson",
          "description" : "User name"
        },
        "state" : {
          "type" : "string",
          "example" : "active",
          "description" : "State of user for account: `active`, `invited`",
          "enum" : [ "active", "invited" ]
        },
        "groups" : {
          "type" : "array",
          "description" : "List of user groups",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "permissions" : {
          "type" : "array",
          "description" : "List of user permissions",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "verified_email" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Email verified"
        },
        "invite_expires" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Expiry date for invite"
        }
      }
    },
    "UpdateUser" : {
      "type" : "object",
      "required" : [ "email" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "email@example.com",
          "description" : "User email"
        },
        "name" : {
          "type" : "string",
          "example" : "My Name",
          "description" : "User name"
        }
      }
    },
    "UpdateUserPassword" : {
      "type" : "object",
      "required" : [ "old_password", "password" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "example" : "mfsh8!oUd",
          "description" : "New password"
        },
        "old_password" : {
          "type" : "string",
          "example" : "mfsh8!oUd",
          "description" : "Old password"
        }
      }
    },
    "UpdateUserGroups" : {
      "type" : "object",
      "required" : [ "groups" ],
      "properties" : {
        "groups" : {
          "type" : "array",
          "description" : "User groups",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        }
      }
    },
    "InviteUser" : {
      "type" : "object",
      "required" : [ "email", "groups" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "mail@example.com",
          "description" : "User email"
        },
        "groups" : {
          "type" : "array",
          "description" : "User groups",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        }
      }
    },
    "InviteUserAccept" : {
      "type" : "object",
      "required" : [ "password" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "My Name",
          "description" : "User name"
        },
        "password" : {
          "type" : "string",
          "example" : "fsdf56!hfH",
          "description" : "New password"
        }
      }
    },
    "UserResetRequestPassword" : {
      "type" : "object",
      "required" : [ "email" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "email@example.com",
          "description" : "User email"
        }
      }
    },
    "ResetUserPassword" : {
      "type" : "object",
      "required" : [ "password" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "example" : "mfsh8!oUd",
          "description" : "New password"
        }
      }
    },
    "Webhook" : {
      "type" : "object",
      "required" : [ "content", "count", "created", "event", "id", "state", "url" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Unique webhook id assigned by Reepay"
        },
        "event" : {
          "type" : "string",
          "example" : "a7a7195c54f644369922d0dfe794dd0c",
          "description" : "Event id of the event this webhook is for"
        },
        "state" : {
          "type" : "string",
          "example" : "pending",
          "description" : "The webhook state, one of the following: `pending`, `disabled`, `failed`, `completed`",
          "enum" : [ "pending", "disabled", "failed", "completed" ]
        },
        "url" : {
          "type" : "string",
          "example" : "https://api.ownserver.com/webhook",
          "description" : "Webhook url"
        },
        "username" : {
          "type" : "string",
          "example" : "username",
          "description" : "Optional basic auth username"
        },
        "password" : {
          "type" : "string",
          "example" : "password",
          "description" : "Optional basic auth password (masked)"
        },
        "content" : {
          "type" : "string",
          "example" : "{\"invoice\":\"a7a7195c54f644369922d0dfe794dd0c\", .... }",
          "description" : "JSON content of the webhook"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Creation date in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "success" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date of successful invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Number of invocations performed"
        },
        "last_fail" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date of last failed invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "first_fail" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date of first failed invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "alert_count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Number of failed invocations before an alert email is sent"
        },
        "alert_sent" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when an optional alert email sending was requested in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        }
      }
    },
    "WebhookRequest" : {
      "type" : "object",
      "required" : [ "duration", "id", "initiated" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "dafba2016614418f969fa5697383e47c",
          "description" : "Unique webhook id assigned by Reepay"
        },
        "initiated" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "2015-04-04T12:40:56.656+00:00",
          "description" : "Date when the webhook request was initiated, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format."
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 345,
          "description" : "Duration in milliseconds of request"
        },
        "headers" : {
          "type" : "string",
          "example" : "Date: ....",
          "description" : "HTTP headers received, null if no response"
        },
        "content" : {
          "type" : "string",
          "example" : "ok",
          "description" : "Truncated content received, null if no response"
        },
        "http_status" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "HTTP status code received, null if no response"
        }
      }
    },
    "WebhookResendRequest" : {
      "type" : "object",
      "required" : [ "webhooks" ],
      "properties" : {
        "webhooks" : {
          "type" : "array",
          "description" : "List of ids for webhooks to resend. The ids can be either webhook ids or event ids. A maximum of 100 ids is allowed.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "WebhookDisableRequest" : {
      "type" : "object",
      "required" : [ "webhooks" ],
      "properties" : {
        "webhooks" : {
          "type" : "array",
          "description" : "List of ids for webhooks to disable. The ids can be either webhook ids or event ids. A maximum of 100 ids is allowed.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "WebhookUpdateRequest" : {
      "type" : "object",
      "required" : [ "url", "webhooks" ],
      "properties" : {
        "webhooks" : {
          "type" : "array",
          "description" : "List of ids for webhooks to update and resend. The ids can be either webhook ids or event ids. A maximum of 100 ids is allowed.",
          "items" : {
            "type" : "string"
          }
        },
        "url" : {
          "type" : "string",
          "example" : "https://api.ownserver.com/webhook",
          "description" : "New webhook url"
        },
        "username" : {
          "type" : "string",
          "example" : "username",
          "description" : "Optional basic auth username"
        },
        "password" : {
          "type" : "string",
          "example" : "password",
          "description" : "Optional basic auth password"
        }
      }
    }
  }
}
